# main.py
import sys
import logging
from PySide6.QtWidgets import QApplication, QMessageBox
from ui.icons import get_icon_manager


def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –î–û –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ä–æ—Ç–∞—Ü–∏–µ–π"""
    from core.config_manager import get_app_data_dir
    from logging.handlers import RotatingFileHandler

    app_data_dir = get_app_data_dir()
    logs_dir = app_data_dir / "logs"
    logs_dir.mkdir(exist_ok=True)

    log_file = logs_dir / "zenzefi_client.log"

    # –†–æ—Ç–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –º–∞–∫—Å 5MB, 5 —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    file_handler = RotatingFileHandler(
        log_file,
        maxBytes=5 * 1024 * 1024,  # 5MB
        backupCount=5,
        encoding='utf-8'
    )
    file_handler.setFormatter(
        logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    )

    console_handler = logging.StreamHandler()
    console_handler.setFormatter(
        logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    )

    logging.basicConfig(
        level=logging.INFO,
        handlers=[console_handler, file_handler]
    )


# –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–ê–ú–´–ú –ü–ï–†–í–´–ú –î–ï–õ–û–ú
setup_logging()
logger = logging.getLogger(__name__)


def setup_exception_handler():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""

    def exception_handler(exc_type, exc_value, exc_traceback):
        if issubclass(exc_type, KeyboardInterrupt):
            sys.__excepthook__(exc_type, exc_value, exc_traceback)
            return

        logger.critical("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:",
                        exc_info=(exc_type, exc_value, exc_traceback))

        try:
            app = QApplication.instance()
            if app:
                QMessageBox.critical(
                    None,
                    "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n{exc_value}\n\n"
                    "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª–µ."
                )
        except:
            pass

    sys.excepthook = exception_handler


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    from utils.single_instance import get_single_instance

    instance_lock = get_single_instance()

    if not instance_lock.lock():
        show_already_running_message()
        return 1

    app = None
    splash = None
    startup_thread = None

    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = QApplication(sys.argv)
        app.setApplicationName("Zenzefi Client")
        app.setApplicationVersion("1.0.0")
        app.setQuitOnLastWindowClosed(False)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        setup_exception_handler()

        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Zenzefi Client")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º splash screen
        from ui.splash_screen import SplashScreen
        splash = SplashScreen()
        splash.show()
        app.processEvents()  # –û–±–Ω–æ–≤–ª—è–µ–º GUI

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        from core.startup_manager import StartupThread
        startup_thread = StartupThread()

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        init_results = {'success': False, 'error': None, 'objects': None}

        def on_progress(message, progress):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
            splash.showMessage(message, progress)
            app.processEvents()

        def on_finished(success, error_message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: success={success}, error='{error_message}'")
            init_results['success'] = success
            init_results['error'] = error_message
            if success:
                init_results['objects'] = startup_thread.get_results()
                logger.info(f"üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {init_results['objects']}")

        startup_thread.progress_signal.connect(on_progress)
        startup_thread.finished_signal.connect(on_finished)
        startup_thread.start()

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–±—ã—Ç–∏–π Qt
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
        while startup_thread.isRunning():
            app.processEvents()  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã Qt
            startup_thread.wait(10)  # –ñ–¥–µ–º 10ms

        # –ï—â–µ —Ä–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è —á—Ç–æ–±—ã –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –¥–æ—à–ª–∏
        app.processEvents()
        logger.info(f"‚úÖ –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: success={init_results['success']}, error={init_results['error']}, objects={init_results['objects']}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not init_results['success']:
            if splash:
                splash.close()
            error_msg = init_results['error'] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
            logger.error(f"‚ùå {error_msg}")
            QMessageBox.critical(
                None,
                "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
                error_msg
            )
            instance_lock.unlock()
            return 1

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        if not init_results['objects']:
            if splash:
                splash.close()
            error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
            logger.error(f"‚ùå {error_msg}")
            QMessageBox.critical(
                None,
                "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
                error_msg
            )
            instance_lock.unlock()
            return 1

        proxy_manager = init_results['objects'].get('proxy_manager')
        if not proxy_manager:
            if splash:
                splash.close()
            error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ProxyManager"
            logger.error(f"‚ùå {error_msg}")
            QMessageBox.critical(
                None,
                "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
                error_msg
            )
            instance_lock.unlock()
            return 1

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        splash.showMessage("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...", 90)
        app.processEvents()

        from core.config_manager import get_config
        config = get_config()
        start_minimized = config.get('application.start_minimized', False)

        # –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ —Ç—Ä–µ–µ
        splash.showMessage("–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è...", 95)
        app.processEvents()

        from ui.tray_icon import TrayIcon
        tray_icon = TrayIcon(app, proxy_manager)
        tray_icon.show()

        # MainWindow —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω –≤ —Å–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ
        # –∏–ª–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Ç—Ä–µ–µ (lazy loading)
        if not start_minimized:
            splash.showMessage("–ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞...", 98)
            app.processEvents()

            from ui.main_window import MainWindow
            main_window = MainWindow(proxy_manager)
            main_window.show()
            tray_icon.main_window = main_window
        else:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤ —Å–≤–µ—Ä–Ω—É—Ç–æ–º —Ä–µ–∂–∏–º–µ, –æ–∫–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º splash screen
        splash.showMessage("–ì–æ—Ç–æ–≤–æ!", 100)
        app.processEvents()

        splash.finish(tray_icon if start_minimized else main_window)

        logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        def cleanup():
            logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            try:
                proxy_manager.stop()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ–∫—Å–∏: {e}")

            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            instance_lock.unlock()

        app.aboutToQuit.connect(cleanup)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
        return_code = app.exec()

        return return_code

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if instance_lock:
            instance_lock.unlock()

        if app:
            QMessageBox.critical(
                None,
                "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n{e}"
            )
        return 1


def show_already_running_message():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        temp_app = QApplication([])
        icon_manager = get_icon_manager()
        temp_app.setWindowIcon(icon_manager.get_icon("window_img.png"))
        QMessageBox.information(
            None,
            "Zenzefi Client",
            "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ.\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π."
        )
        temp_app.quit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    logger.info("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")


if __name__ == "__main__":
    sys.exit(main())