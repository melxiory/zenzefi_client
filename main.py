# test_all_modules.py
import logging
import time
from pathlib import Path
from core.certificate_manager import CertificateManager
from core.nginx_manager import NginxManager
from core.config_manager import get_config
from utils.process_manager import get_process_manager
from utils.port_utils import is_port_in_use, get_process_using_port, check_port_availability
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('test_suite.log', encoding='utf-8')
    ]
)

logger = logging.getLogger(__name__)


def test_certificate_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
    print("\n" + "=" * 60)
    print("üîê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CERTIFICATE MANAGER")
    print("=" * 60)

    nginx_dir = Path("nginx").absolute()
    cert_manager = CertificateManager(nginx_dir)

    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...")
    if cert_manager.check_certificates_exist():
        print("   ‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
    else:
        print("   ‚ö†Ô∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    # –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    print("\n2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...")
    if cert_manager.generate_self_signed_certificate():
        print("   ‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
    else:
        print("   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
        return False

    # –¢–µ—Å—Ç 3: –ì–∞—Ä–∞–Ω—Ç–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
    print("\n3. –ì–∞—Ä–∞–Ω—Ç–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...")
    if cert_manager.ensure_certificates_exist():
        print("   ‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
    else:
        print("   ‚ùå –û—à–∏–±–∫–∞ –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è")
        return False

    # –¢–µ—Å—Ç 4: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
    print("\n4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ...")
    cert_info = cert_manager.get_certificate_info()
    print(f"   üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {cert_info}")

    # –¢–µ—Å—Ç 5: –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    print("\n5. –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...")
    days_left = cert_manager.get_certificate_days_remaining()
    print(f"   üìÖ –î–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {days_left}")

    return True


def test_port_utils():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç–∞–º–∏"""
    print("\n" + "=" * 60)
    print("üö™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PORT UTILS")
    print("=" * 60)

    test_port = 61000

    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞
    print(f"\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ {test_port}...")
    port_in_use = is_port_in_use(test_port)
    print(f"   üìç –ü–æ—Ä—Ç –∑–∞–Ω—è—Ç: {port_in_use}")

    # –¢–µ—Å—Ç 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    print("\n2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞ –ø–æ—Ä—Ç—É...")
    process_info = get_process_using_port(test_port)
    if process_info:
        print(f"   üîç –ü—Ä–æ—Ü–µ—Å—Å: {process_info}")
    else:
        print("   ‚ÑπÔ∏è  –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω")

    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞...")
    available, message = check_port_availability(test_port)
    print(f"   üìä –î–æ—Å—Ç—É–ø–µ–Ω: {available}")
    print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")

    return True


def test_process_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    print("\n" + "=" * 60)
    print("‚öôÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PROCESS MANAGER")
    print("=" * 60)

    process_manager = get_process_manager()

    # –¢–µ—Å—Ç 1: –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    admin_status = process_manager.get_admin_status()
    print(f"   üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_status['is_admin']}")
    print(f"   üí¨ {admin_status['message']}")

    # –¢–µ—Å—Ç 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö nginx
    print("\n2. –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ nginx...")
    nginx_processes = process_manager.get_process_info("nginx.exe")
    print(f"   üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(nginx_processes)}")
    for proc in nginx_processes:
        print(f"   ‚Ä¢ PID: {proc['pid']}, –ò–º—è: {proc['name']}, –ù–∞—à: {proc['is_our_process']}")

    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    is_running = process_manager.is_process_running("nginx.exe")
    print(f"   üö¶ Nginx –∑–∞–ø—É—â–µ–Ω: {is_running}")

    return True


def test_nginx_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ nginx"""
    print("\n" + "=" * 60)
    print("üåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï NGINX MANAGER")
    print("=" * 60)

    nginx_manager = NginxManager()

    # –¢–µ—Å—Ç 1: –°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    print("\n1. –°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º...")
    status = nginx_manager.get_status()
    print(f"   üìä –ó–∞–ø—É—â–µ–Ω: {status['running']}")
    print(f"   üìç –ü–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {status['port_available']}")
    if 'port_message' in status:
        print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {status['port_message']}")

    # –¢–µ—Å—Ç 2: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    print("\n2. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...")
    if nginx_manager.stop():
        print("   ‚úÖ Nginx –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        print("   ‚ÑπÔ∏è Nginx –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω")

    # –¢–µ—Å—Ç 3: –ó–∞–ø—É—Å–∫ nginx
    print("\n3. –ó–∞–ø—É—Å–∫ nginx...")
    if nginx_manager.start():
        print("   ‚úÖ Nginx —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

        # –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å
        time.sleep(2)

        # –¢–µ—Å—Ç 4: –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        print("\n4. –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞...")
        status = nginx_manager.get_status()
        print(f"   üìä –ó–∞–ø—É—â–µ–Ω: {status['running']}")
        print(f"   üìç –ü–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {status['port_available']}")

        # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–æ—Ä—Ç–∞
        print("\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–æ—Ä—Ç–∞...")
        try:
            response = requests.get(f"https://127.0.0.1:61000", verify=False, timeout=5)
            print(f"   üåê HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        except requests.exceptions.SSLError:
            print("   üîí SSL –æ—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è self-signed cert)")
        except requests.exceptions.ConnectionError:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

        # –¢–µ—Å—Ç 6: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ nginx
        print("\n6. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ nginx...")
        if nginx_manager.stop():
            print("   ‚úÖ Nginx —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ nginx")
            return False

    else:
        print("   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ nginx")
        return False

    return True


def test_config_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n" + "=" * 60)
    print("‚öôÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CONFIG MANAGER")
    print("=" * 60)

    config = get_config()

    # –¢–µ—Å—Ç 1: –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\n1. –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    proxy_config = config.get_proxy_config()
    print(f"   üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏: {proxy_config}")

    # –¢–µ—Å—Ç 2: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    print("\n2. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    new_port = 61001
    config.set('proxy.local_port', new_port, save=False)
    print(f"   üîß –ò–∑–º–µ–Ω–µ–Ω –ø–æ—Ä—Ç –Ω–∞: {new_port}")

    # –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\n3. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    is_valid, message = config.validate_proxy_config()
    print(f"   ‚úÖ –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {is_valid}")
    print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")

    # –¢–µ—Å—Ç 4: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    print("\n4. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    config.set('proxy.local_port', 61000, save=False)
    print("   üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    # –¢–µ—Å—Ç 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\n5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    if config.save():
        print("   üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    else:
        print("   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

    return True


def run_comprehensive_test():
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)

    tests = [
        ("Certificate Manager", test_certificate_manager),
        ("Port Utils", test_port_utils),
        ("Process Manager", test_process_manager),
        ("Config Manager", test_config_manager),
        ("Nginx Manager", test_nginx_manager),
    ]

    results = []

    for test_name, test_func in tests:
        try:
            print(f"\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
            success = test_func()
            results.append((test_name, success))
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"   {status}")
        except Exception as e:
            results.append((test_name, False))
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)

    passed = 0
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:20} {status}")
        if success:
            passed += 1

    print(f"\nüìà –ò—Ç–æ–≥–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        return False


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        import psutil
        import cryptography

        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install psutil cryptography")
        exit(1)

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    success = run_comprehensive_test()

    if success:
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª test_suite.log –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

    exit(0 if success else 1)