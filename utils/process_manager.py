# utils/process_manager.py
import time
import psutil
import subprocess
import logging
import ctypes
from pathlib import Path
from typing import List, Dict, Optional

logger = logging.getLogger(__name__)


class ProcessManager:
    def __init__(self):
        self.is_admin = self._check_admin_rights()

    def _check_admin_rights(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            return ctypes.windll.shell32.IsUserAnAdmin()
        except:
            return False

    def get_process_info(self, process_name: str) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º"""
        processes = []
        for proc in psutil.process_iter(['pid', 'name', 'username', 'exe', 'cmdline']):
            try:
                if proc.info['name'] and proc.info['name'].lower() == process_name.lower():
                    process_info = {
                        'pid': proc.info['pid'],
                        'name': proc.info['name'],
                        'username': proc.info.get('username', 'N/A'),
                        'exe': proc.info.get('exe', 'N/A'),
                        'cmdline': proc.info.get('cmdline', []),
                        'is_our_process': self._is_our_process(proc),
                        'can_manage': self._can_manage_process(proc)
                    }
                    processes.append(process_info)
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        return processes

    def _is_our_process(self, process) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—à–∏–º (–∑–∞–ø—É—â–µ–Ω –∏–∑ –Ω–∞—à–µ–π –ø–∞–ø–∫–∏)"""
        try:
            if hasattr(process, 'exe') and process.exe():
                exe_path = Path(process.exe())
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≤ –Ω–∞—à–µ–π –ø–∞–ø–∫–µ nginx
                nginx_dir = Path("nginx").absolute()
                return nginx_dir in exe_path.parents
            return False
        except (psutil.AccessDenied, AttributeError):
            return False

    def _can_manage_process(self, process) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ–º –ª–∏ –º—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ–º"""
        if self.is_admin:
            return True  # –° –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∞ –º–æ–∂–µ–º —É–ø—Ä–∞–≤–ª—è—Ç—å –ª—é–±—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏

        # –ë–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –º–æ–∂–µ–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
        return self._is_our_process(process)

    def terminate_process(self, pid: int, force: bool = False) -> bool:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ PID"""
        try:
            process = psutil.Process(pid)

            if not self._can_manage_process(process):
                logger.warning(f"üö´ –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ PID: {pid}")
                return False

            if force:
                process.kill()
            else:
                process.terminate()

            process.wait(timeout=3)
            logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å PID: {pid} {'–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ ' if force else ''}–∑–∞–≤–µ—Ä—à–µ–Ω")
            return True

        except psutil.NoSuchProcess:
            logger.info(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å PID: {pid} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return True
        except psutil.AccessDenied:
            logger.error(f"‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –ø—Ä–æ—Ü–µ—Å—Å—É PID: {pid}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ PID: {pid}: {e}")
            return False

    def terminate_processes_by_name(self, process_name: str, force: bool = False) -> int:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º"""
        processes = self.get_process_info(process_name)
        terminated_count = 0

        for proc_info in processes:
            if self.terminate_process(proc_info['pid'], force):
                terminated_count += 1

        return terminated_count

    def terminate_all_nginx(self) -> int:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã nginx —Å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π"""
        logger.info(f"üîß –ó–∞–ø—É—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ nginx –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–∞–¥–º–∏–Ω: {self.is_admin})")

        # –®–∞–≥ 1: Graceful shutdown —á–µ—Ä–µ–∑ nginx –∫–æ–º–∞–Ω–¥—É
        graceful_stopped = self._graceful_nginx_shutdown()
        if graceful_stopped:
            return graceful_stopped

        # –®–∞–≥ 2: –û–±—ã—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        processes = self.get_process_info("nginx.exe")
        terminated_count = 0

        for proc_info in processes:
            if proc_info['can_manage']:
                if self.terminate_process(proc_info['pid'], force=False):
                    terminated_count += 1

        # –®–∞–≥ 3: –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–ª–∏—Å—å, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if terminated_count < len([p for p in processes if p['can_manage']]):
            time.sleep(2)
            remaining_processes = self.get_process_info("nginx.exe")
            for proc_info in remaining_processes:
                if proc_info['can_manage']:
                    if self.terminate_process(proc_info['pid'], force=True):
                        terminated_count += 1

        # –®–∞–≥ 4: –ò—Å–ø–æ–ª—å–∑—É–µ–º taskkill –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        self._use_taskkill()

        return terminated_count

    def _graceful_nginx_shutdown(self) -> int:
        """–ü—ã—Ç–∞–µ—Ç—Å—è graceful shutdown —á–µ—Ä–µ–∑ nginx -s quit"""
        try:
            nginx_dir = Path("nginx").absolute()
            nginx_exe = nginx_dir / "nginx.exe"

            if nginx_exe.exists():
                result = subprocess.run(
                    [str(nginx_exe), "-s", "quit"],
                    cwd=str(nginx_dir),
                    capture_output=True,
                    timeout=5,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
                if result.returncode == 0:
                    logger.info("‚úÖ Graceful shutdown nginx –≤—ã–ø–æ–ª–Ω–µ–Ω")
                    return 1
        except Exception as e:
            logger.debug(f"Graceful shutdown –Ω–µ —É–¥–∞–ª—Å—è: {e}")

        return 0

    def _use_taskkill(self):
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç taskkill –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        try:
            if self.is_admin:
                # –° –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∞ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ
                subprocess.run(
                    ["taskkill", "/f", "/im", "nginx.exe"],
                    capture_output=True,
                    timeout=10,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
            else:
                # –ë–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ - –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                subprocess.run(
                    ["taskkill", "/im", "nginx.exe"],
                    capture_output=True,
                    timeout=5,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ taskkill: {e}")

    def is_process_running(self, process_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å"""
        return len(self.get_process_info(process_name)) > 0

    def get_admin_status(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∞—Ö –¥–æ—Å—Ç—É–ø–∞"""
        return {
            'is_admin': self.is_admin,
            'message': '–° –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' if self.is_admin else '–ë–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
        }


# –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
_process_manager = None


def get_process_manager() -> ProcessManager:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ProcessManager"""
    global _process_manager
    if _process_manager is None:
        _process_manager = ProcessManager()
    return _process_manager