import json
import sys
import logging
import time
from pathlib import Path
from typing import Dict, Any, Optional
import os
from cryptography.fernet import Fernet

logger = logging.getLogger(__name__)


def get_app_data_dir():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    if getattr(sys, 'frozen', False):
        # –í portable —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º _MEIPASS –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if hasattr(sys, '_MEIPASS'):
            # –î–ª—è —Ä–∞–±–æ—á–∏—Ö —Ñ–∞–π–ª–æ–≤ (–∫–æ–Ω—Ñ–∏–≥–∏, –ª–æ–≥–∏, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã) –∏—Å–ø–æ–ª—å–∑—É–µ–º AppData
            if os.name == 'nt':  # Windows
                appdata_dir = Path(os.getenv('LOCALAPPDATA', Path.home() / 'AppData' / 'Local'))
                app_data_dir = appdata_dir / 'Zenzefi'
            else:  # Linux/Mac
                app_data_dir = Path.home() / '.config' / 'zenzefi'
        else:
            # Dev —Ä–µ–∂–∏–º
            app_data_dir = Path(__file__).parent.parent / 'app_data'
    else:
        # Dev —Ä–µ–∂–∏–º
        app_data_dir = Path(__file__).parent.parent / 'app_data'

    app_data_dir.mkdir(parents=True, exist_ok=True)
    return app_data_dir


class ConfigManager:
    def __init__(self):
        self.config_path = self._get_config_path()
        self.cipher = self._get_cipher()
        self.config = self._load_config()

    def _get_config_path(self) -> Path:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config_dir = get_app_data_dir()

        config_dir.mkdir(parents=True, exist_ok=True)
        return config_dir / 'config.json'

    def _get_cipher(self) -> Fernet:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è, –≥–µ–Ω–µ—Ä–∏—Ä—É—è –∫–ª—é—á –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        key_path = get_app_data_dir() / '.encryption_key'

        try:
            if key_path.exists():
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á
                with open(key_path, 'rb') as key_file:
                    key = key_file.read()
            else:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
                key = Fernet.generate_key()
                with open(key_path, 'wb') as key_file:
                    key_file.write(key)
                logger.info("üîë –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")

            return Fernet(key)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
            # Fallback: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á
            return Fernet(Fernet.generate_key())

    def _get_default_config(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            'proxy': {
                'enabled': False,
                'local_port': 61000,
                'remote_url': '',
            },

            'application': {
                'auto_start': False,
                'minimize_to_tray': True,
                'start_minimized': False,
                'single_instance': True,
                'show_already_running_message': True,
                'theme': 'dark'  # ‚Üê –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
            },

            'ui': {
                'window_width': 800,
                'window_height': 600,
            }
        }

    def _load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        default_config = self._get_default_config()

        try:
            if self.config_path.exists():
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                    return self._deep_merge(default_config, loaded_config)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")

        return default_config

    def _deep_merge(self, base: Dict[str, Any], update: Dict[str, Any]) -> Dict[str, Any]:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π"""
        result = base.copy()

        for key, value in update.items():
            if (key in result and
                    isinstance(result[key], dict) and
                    isinstance(value, dict)):
                result[key] = self._deep_merge(result[key], value)
            else:
                result[key] = value

        return result

    def save(self) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.config_path, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
            logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            return False

    def get(self, key: str, default: Any = None) -> Any:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É (dot notation)"""
        try:
            keys = key.split('.')
            value = self.config

            for k in keys:
                if isinstance(value, dict) and k in value:
                    value = value[k]
                else:
                    return default

            return value
        except:
            return default

    def set(self, key: str, value: Any, save: bool = False) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É (dot notation)"""
        try:
            keys = key.split('.')
            config_ref = self.config

            for k in keys[:-1]:
                if k not in config_ref or not isinstance(config_ref[k], dict):
                    config_ref[k] = {}
                config_ref = config_ref[k]

            config_ref[keys[-1]] = value

            if save:
                return self.save()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è {key}: {e}")
            return False

    def get_proxy_config(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏"""
        return self.get('proxy', {})

    def set_proxy_config(self, config: Dict[str, Any], save: bool = True) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏"""
        return self.set('proxy', config, save)

    def get_app_config(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        return self.get('application', {})

    def add_connection_history(self, success: bool, message: str = "") -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        history = self.get('history.connection_history', [])
        history.insert(0, {
            'timestamp': time.time(),
            'success': success,
            'message': message
        })

        history = history[:100]
        self.set('history.connection_history', history)

    def validate_proxy_config(self) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏"""
        port = self.get('proxy.local_port')
        url = self.get('proxy.remote_url')

        if not isinstance(port, int) or port < 1 or port > 65535:
            return False, "–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 65535"

        if not url or not isinstance(url, str):
            return False, "URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"

        if not url.startswith(('http://', 'https://')):
            return False, "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://"

        return True, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"

    def reset_to_defaults(self) -> bool:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.config = self._get_default_config()
        return self.save()

    def get_access_token(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π access token"""
        try:
            if 'auth' in self.config and 'access_token_encrypted' in self.config['auth']:
                encrypted = self.config['auth']['access_token_encrypted']
                decrypted = self.cipher.decrypt(encrypted.encode()).decode('utf-8')
                return decrypted
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

    def set_access_token(self, token: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π access token"""
        try:
            if not token or not token.strip():
                logger.warning("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω")
                return False

            if 'auth' not in self.config:
                self.config['auth'] = {}

            encrypted = self.cipher.encrypt(token.encode()).decode('utf-8')
            self.config['auth']['access_token_encrypted'] = encrypted
            return self.save()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return False

    def clear_access_token(self) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            if 'auth' in self.config and 'access_token_encrypted' in self.config['auth']:
                del self.config['auth']['access_token_encrypted']
                # –ï—Å–ª–∏ —Å–µ–∫—Ü–∏—è auth –ø—É—Å—Ç–∞—è, —É–¥–∞–ª—è–µ–º –µ—ë
                if not self.config['auth']:
                    del self.config['auth']
                return self.save()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return False

    def has_access_token(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ access token"""
        return ('auth' in self.config and
                'access_token_encrypted' in self.config['auth'] and
                bool(self.config['auth']['access_token_encrypted']))


# –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
_config_instance = None


def get_config() -> ConfigManager:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ConfigManager"""
    global _config_instance
    if _config_instance is None:
        _config_instance = ConfigManager()
    return _config_instance