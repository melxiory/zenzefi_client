import subprocess
import time
import logging
from pathlib import Path

logger = logging.getLogger(__name__)


class NginxManager:
    def __init__(self):
        self.process = None
        self.is_running = False
        self.nginx_dir = Path("nginx").absolute()

    def start(self, local_port=61000, remote_url="https://zenzefi.melxiory.ru"):
        """–ó–∞–ø—É—Å–∫ nginx –ø—Ä–æ–∫—Å–∏"""
        if self.is_running:
            logger.warning("Nginx —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return False

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ nginx —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            nginx_exe = self.nginx_dir / "nginx.exe"
            if not nginx_exe.exists():
                logger.error(f"nginx.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {self.nginx_dir}")
                return False

            # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ —Å—Ç–∞—Ä—ã–π nginx –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            self._force_stop_nginx()

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
            self._generate_custom_config(local_port, remote_url)

            # –ó–∞–ø—É—Å–∫–∞–µ–º nginx
            self.process = subprocess.Popen(
                [str(nginx_exe)],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                cwd=str(self.nginx_dir),
                creationflags=subprocess.CREATE_NO_WINDOW
            )

            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            time.sleep(3)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            if self._is_nginx_running():
                self.is_running = True
                logger.info(f"‚úÖ Nginx –∑–∞–ø—É—â–µ–Ω –Ω–∞ https://127.0.0.1:{local_port}")
                logger.info(f"üåê –ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞: {remote_url}")
                return True
            else:
                logger.error("‚ùå Nginx –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                if self.process.stderr:
                    try:
                        error_output = self.process.stderr.read().decode('utf-8', errors='ignore')
                        if error_output:
                            logger.error(f"–û—à–∏–±–∫–∏ nginx: {error_output}")
                    except:
                        pass
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ nginx: {e}")
            return False

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ nginx"""
        try:
            # Graceful shutdown
            if self.process:
                try:
                    nginx_exe = self.nginx_dir / "nginx.exe"
                    subprocess.run(
                        [str(nginx_exe), "-s", "quit"],
                        cwd=str(self.nginx_dir),
                        capture_output=True,
                        timeout=5,
                        creationflags=subprocess.CREATE_NO_WINDOW
                    )
                    self.process.terminate()
                    self.process.wait(timeout=5)
                except:
                    pass

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
            self._force_stop_nginx()

            self.is_running = False
            self.process = None
            logger.info("‚úÖ Nginx –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ nginx: {e}")
            return False

    def _force_stop_nginx(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ nginx"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º taskkill –¥–ª—è Windows
            subprocess.run(
                ["taskkill", "/f", "/im", "nginx.exe"],
                capture_output=True,
                timeout=10,
                creationflags=subprocess.CREATE_NO_WINDOW
            )

            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            time.sleep(2)

        except Exception as e:
            logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ nginx: {e}")

    def _generate_custom_config(self, local_port, remote_url):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π nginx.conf –±–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
        full_config = f'''
worker_processes  1;

events {{
    worker_connections  1024;
}}

http {{
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    # Zenzefi Proxy Configuration
    server {{
        listen       {local_port} ssl;
        server_name  127.0.0.1;

        # Self-signed —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è localhost
        ssl_certificate      ../fake.crt;
        ssl_certificate_key  ../fake.key;

        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_ciphers         HIGH:!aNULL:!MD5;

        # –¢–∞–π–º–∞—É—Ç—ã
        proxy_connect_timeout 30s;
        proxy_send_timeout    30s;
        proxy_read_timeout    30s;

        # –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;

        location / {{
            proxy_pass {remote_url};

            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            proxy_set_header Host zenzefi.melxiory.ru;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è upstream
            proxy_ssl_verify off;
            proxy_ssl_server_name on;

            # –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –£–ë–†–ê–ù
        }}
    }}
}}
'''
        # –ó–∞–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥
        conf_dir = self.nginx_dir / "conf"
        main_conf_path = conf_dir / "nginx.conf"
        main_conf_path.write_text(full_config, encoding='utf-8')
        logger.info(f"üìÅ –û—Å–Ω–æ–≤–Ω–æ–π nginx.conf –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω")

    def _is_nginx_running(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ nginx"""
        try:
            result = subprocess.run(
                ["tasklist", "/fi", "imagename eq nginx.exe"],
                capture_output=True,
                text=True,
                timeout=5,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            return "nginx.exe" in result.stdout
        except:
            return False

    def get_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å nginx"""
        return {
            'running': self.is_running,
            'port': 61000,
            'url': 'https://zenzefi.melxiory.ru'
        }

    def restart(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ nginx"""
        self.stop()
        time.sleep(3)
        return self.start()