# nginx_manager.py
import subprocess
import time
import logging
from pathlib import Path
from utils.process_manager import get_process_manager
from utils.port_utils import check_port_availability, get_process_using_port

logger = logging.getLogger(__name__)


class NginxManager:
    def __init__(self):
        self.process = None
        self.is_running = False
        self.nginx_dir = Path("nginx").absolute()
        self.process_manager = get_process_manager()
        self.remote_url = ""
        self.local_port = 61000

    def start(self, local_port=61000, remote_url="https://zenzefi.melxiory.ru"):
        """–ó–∞–ø—É—Å–∫ nginx –ø—Ä–æ–∫—Å–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ—Ä—Ç–æ–º"""
        if self.is_running:
            logger.warning("Nginx —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return False

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ nginx —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            nginx_exe = self.nginx_dir / "nginx.exe"
            if not nginx_exe.exists():
                logger.error(f"nginx.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {self.nginx_dir}")
                return False

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –Ω–∞—à–∏ nginx –ø—Ä–æ—Ü–µ—Å—Å—ã
            logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ nginx –ø—Ä–æ—Ü–µ—Å—Å—ã...")
            terminated_count = self.process_manager.terminate_all_nginx()
            logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ nginx: {terminated_count}")
            time.sleep(2)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
            port_available, port_message = check_port_availability(local_port)

            if not port_available:
                # –ü–æ—Ä—Ç –∑–∞–Ω—è—Ç - –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
                process_info = get_process_using_port(local_port)
                if process_info:
                    logger.warning(f"‚ö†Ô∏è {port_message}")

                    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –∑–∞–Ω–∏–º–∞—é—â–∏–π –ø–æ—Ä—Ç
                    if self.process_manager.terminate_process(process_info['pid']):
                        logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç again...")
                        time.sleep(2)
                        port_available, port_message = check_port_availability(local_port)

                # –ï—Å–ª–∏ –ø–æ—Ä—Ç –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç
                if not port_available:
                    error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç {local_port}. {port_message}"
                    logger.error(f"‚ùå {error_msg}")

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if self.process_manager.is_admin:
                        user_msg = (
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –Ω–∞ –ø–æ—Ä—Ç—É {local_port}\n\n"
                            f"–ü—Ä–∏—á–∏–Ω–∞: {port_message}\n\n"
                            f"üìã –†–µ—à–µ–Ω–∏—è:\n"
                            f"‚Ä¢ –ó–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—é—â—É—é –ø–æ—Ä—Ç {local_port}\n"
                            f"‚Ä¢ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä\n"
                            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–ª—É–∂–±—ã"
                        )
                    else:
                        user_msg = (
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –Ω–∞ –ø–æ—Ä—Ç—É {local_port}\n\n"
                            f"–ü—Ä–∏—á–∏–Ω–∞: {port_message}\n\n"
                            f"üìã –†–µ—à–µ–Ω–∏—è:\n"
                            f"‚Ä¢ –ó–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—é—â—É—é –ø–æ—Ä—Ç {local_port}\n"
                            f"‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã"
                        )

                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ UI
                    logger.error(user_msg)
                    return False

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
            self._generate_custom_config(local_port, remote_url)
            self.remote_url = remote_url
            self.local_port = local_port

            # –ó–∞–ø—É—Å–∫–∞–µ–º nginx
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º nginx...")
            self.process = subprocess.Popen(
                [str(nginx_exe)],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                cwd=str(self.nginx_dir),
                creationflags=subprocess.CREATE_NO_WINDOW
            )

            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            time.sleep(3)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            if self._is_nginx_running():
                self.is_running = True
                logger.info(f"‚úÖ Nginx –∑–∞–ø—É—â–µ–Ω –Ω–∞ https://127.0.0.1:{local_port}")
                logger.info(f"üåê –ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞: {remote_url}")
                return True
            else:
                logger.error("‚ùå Nginx –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                if self.process.stderr:
                    try:
                        error_output = self.process.stderr.read().decode('utf-8', errors='ignore')
                        if error_output:
                            logger.error(f"–û—à–∏–±–∫–∏ nginx: {error_output}")
                    except:
                        pass
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ nginx: {e}")
            return False

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ nginx"""
        try:
            # Graceful shutdown –Ω–∞—à–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            if self.process:
                try:
                    self.process.terminate()
                    self.process.wait(timeout=2)
                except:
                    pass

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ nginx –ø—Ä–æ—Ü–µ—Å—Å—ã
            logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ nginx –ø—Ä–æ—Ü–µ—Å—Å—ã...")
            terminated_count = self.process_manager.terminate_all_nginx()
            logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ nginx: {terminated_count}")

            self.is_running = False
            self.process = None
            logger.info("‚úÖ Nginx –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ nginx: {e}")
            return False

    def _generate_custom_config(self, local_port, remote_url):
        """–°–æ–∑–¥–∞–µ—Ç nginx config"""
        full_config = f'''
worker_processes  1;

events {{
    worker_connections  1024;
}}

http {{
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    server {{
        listen       {local_port} ssl;
        server_name  127.0.0.1;

        ssl_certificate      ../fake.crt;
        ssl_certificate_key  ../fake.key;

        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_ciphers         HIGH:!aNULL:!MD5;

        proxy_connect_timeout 30s;
        proxy_send_timeout    30s;
        proxy_read_timeout    30s;

        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;

        location / {{
            proxy_pass {remote_url};
            proxy_set_header Host zenzefi.melxiory.ru;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_ssl_verify off;
            proxy_ssl_server_name on;
        }}
    }}
}}
'''
        conf_dir = self.nginx_dir / "conf"
        main_conf_path = conf_dir / "nginx.conf"
        main_conf_path.write_text(full_config, encoding='utf-8')
        logger.info(f"üìÅ –ö–æ–Ω—Ñ–∏–≥ nginx –æ–±–Ω–æ–≤–ª–µ–Ω")

    def _is_nginx_running(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ nginx"""
        try:
            result = subprocess.run(
                ["tasklist", "/fi", "imagename eq nginx.exe"],
                capture_output=True,
                text=True,
                timeout=5,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            return "nginx.exe" in result.stdout
        except:
            return False

    def get_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å"""
        port_available, port_message = check_port_availability(self.local_port)

        status = {
            'running': self.is_running,
            'port_available': port_available,
            'port': self.local_port,
            'url': self.remote_url,
            'is_admin': self.process_manager.is_admin
        }

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if port_message:
            status['port_message'] = port_message

        return status

    def restart(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ nginx"""
        if self.stop():
            time.sleep(3)
            return self.start()
        return False