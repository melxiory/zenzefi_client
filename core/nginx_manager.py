# nginx_manager.py
import subprocess
import time
import logging
import os
import psutil
from pathlib import Path
from utils.process_manager import get_process_manager
from utils.port_utils import check_port_availability, get_process_using_port
import sys

logger = logging.getLogger(__name__)


def ensure_nginx_directories(nginx_dir):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è nginx"""
    required_folders = [
        "temp/client_body_temp",
        "temp/proxy_temp",
        "temp/fastcgi_temp",
        "temp/uwsgi_temp",
        "temp/scgi_temp",
    ]

    for folder in required_folders:
        folder_path = nginx_dir / folder
        folder_path.mkdir(parents=True, exist_ok=True)
        logger.debug(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder_path}")


def get_nginx_path():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ nginx —Å —É—á–µ—Ç–æ–º portable —Ä–µ–∂–∏–º–∞"""
    if getattr(sys, 'frozen', False):
        # –í portable —Ä–µ–∂–∏–º–µ –∏—â–µ–º nginx –≤ _MEIPASS
        if hasattr(sys, '_MEIPASS'):
            nginx_dir = Path(sys._MEIPASS) / "nginx"
            if nginx_dir.exists() and (nginx_dir / "nginx.exe").exists():
                return nginx_dir

        # –ï—Å–ª–∏ –≤ _MEIPASS –Ω–µ—Ç, –∏—â–µ–º —Ä—è–¥–æ–º —Å EXE
        nginx_dir = Path(sys.executable).parent / "nginx"
        if nginx_dir.exists() and (nginx_dir / "nginx.exe").exists():
            return nginx_dir

        logger.error("‚ùå nginx –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    else:
        # Dev —Ä–µ–∂–∏–º
        return Path("nginx").absolute()


class NginxManager:
    def __init__(self):
        self.nginx_dir = get_nginx_path()
        if not self.nginx_dir:
            return

        self.process = None
        self.is_running = False
        self.process_manager = get_process_manager()
        self.remote_url = ""
        self.local_port = 61000

        logger.info(f"‚úÖ nginx –ø—É—Ç—å: {self.nginx_dir}")

    def start(self, local_port=61000, remote_url="https://zenzefi.melxiory.ru"):
        """–ó–∞–ø—É—Å–∫ nginx –ø—Ä–æ–∫—Å–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ—Ä—Ç–æ–º"""
        if self.is_running:
            logger.warning("Nginx —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return False

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ nginx —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            nginx_exe = self.nginx_dir / "nginx.exe"
            if not nginx_exe.exists():
                logger.error(f"nginx.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {self.nginx_dir}")
                return False

            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞
            port_available, port_message = check_port_availability(local_port)

            # –ï—Å–ª–∏ –ø–æ—Ä—Ç –∑–∞–Ω—è—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –Ω–∞—à–∏–º –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
            if not port_available and self.is_port_in_use_by_us(local_port):
                logger.info("‚ö†Ô∏è –ü–æ—Ä—Ç –∑–∞–Ω—è—Ç –Ω–∞—à–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å...")
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—à —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å
                self.stop()
                time.sleep(2)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç —Å–Ω–æ–≤–∞
                port_available, port_message = check_port_availability(local_port)

            if not port_available:
                # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–Ω—è—Ç–æ–≥–æ –ø–æ—Ä—Ç–∞...
                process_info = get_process_using_port(local_port)
                if process_info:
                    logger.warning(f"‚ö†Ô∏è {port_message}")

                    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –∑–∞–Ω–∏–º–∞—é—â–∏–π –ø–æ—Ä—Ç
                    if self.process_manager.terminate_process(process_info['pid']):
                        logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç again...")
                        time.sleep(2)
                        port_available, port_message = check_port_availability(local_port)

                # –ï—Å–ª–∏ –ø–æ—Ä—Ç –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç
                if not port_available:
                    error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç {local_port}. {port_message}"
                    logger.error(f"‚ùå {error_msg}")

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if self.process_manager.is_admin:
                        user_msg = (
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –Ω–∞ –ø–æ—Ä—Ç—É {local_port}\n\n"
                            f"–ü—Ä–∏—á–∏–Ω–∞: {port_message}\n\n"
                            f"üìã –†–µ—à–µ–Ω–∏—è:\n"
                            f"‚Ä¢ –ó–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—é—â—É—é –ø–æ—Ä—Ç {local_port}\n"
                            f"‚Ä¢ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä\n"
                            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–ª—É–∂–±—ã"
                        )
                    else:
                        user_msg = (
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –Ω–∞ –ø–æ—Ä—Ç—É {local_port}\n\n"
                            f"–ü—Ä–∏—á–∏–Ω–∞: {port_message}\n\n"
                            f"üìã –†–µ—à–µ–Ω–∏—è:\n"
                            f"‚Ä¢ –ó–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—é—â—É—é –ø–æ—Ä—Ç {local_port}\n"
                            f"‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã"
                        )

                    logger.error(user_msg)
                    return False

            # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞...
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
            self._generate_custom_config(local_port, remote_url)
            self.remote_url = remote_url
            self.local_port = local_port

            # –ó–∞–ø—É—Å–∫–∞–µ–º nginx
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º nginx...")
            self.process = subprocess.Popen(
                [str(nginx_exe)],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                cwd=str(self.nginx_dir),
                creationflags=subprocess.CREATE_NO_WINDOW
            )

            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            time.sleep(3)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            if self._is_nginx_running():
                self.is_running = True
                logger.info(f"‚úÖ Nginx –∑–∞–ø—É—â–µ–Ω –Ω–∞ https://127.0.0.1:{local_port}")
                logger.info(f"üåê –ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞: {remote_url}")
                return True
            else:
                logger.error("‚ùå Nginx –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                if self.process.stderr:
                    try:
                        error_output = self.process.stderr.read().decode('utf-8', errors='ignore')
                        if error_output:
                            logger.error(f"–û—à–∏–±–∫–∏ nginx: {error_output}")
                    except:
                        pass
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ nginx: {e}")
            return False

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ nginx - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Windows-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–∞ Windows
        if os.name == 'nt':
            return self.stop_windows()

        # –î–ª—è –¥—Ä—É–≥–∏—Ö –û–° –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
        try:
            # Graceful shutdown –Ω–∞—à–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            if self.process:
                try:
                    self.process.terminate()
                    self.process.wait(timeout=2)
                except:
                    pass

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ nginx –ø—Ä–æ—Ü–µ—Å—Å—ã
            logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ nginx –ø—Ä–æ—Ü–µ—Å—Å—ã...")
            terminated_count = self.process_manager.terminate_all_nginx()
            logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ nginx: {terminated_count}")

            self.is_running = False
            self.process = None
            logger.info("‚úÖ Nginx –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ nginx: {e}")
            return False

    def stop_windows(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ nginx –Ω–∞ Windows - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        try:
            # 1. Graceful shutdown —á–µ—Ä–µ–∑ nginx –∫–æ–º–∞–Ω–¥—É
            try:
                nginx_exe = self.nginx_dir / "nginx.exe"
                if nginx_exe.exists():
                    subprocess.run([
                        str(nginx_exe),
                        "-s", "quit"
                    ], timeout=5, capture_output=True, cwd=str(self.nginx_dir))
                    logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ graceful shutdown")
                    time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            except subprocess.TimeoutExpired:
                logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç graceful shutdown")
            except Exception as e:
                logger.debug(f"Graceful shutdown –Ω–µ —É–¥–∞–ª—Å—è: {e}")

            # 2. –ò—â–µ–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –í–°–ï –ø—Ä–æ—Ü–µ—Å—Å—ã nginx –æ—Ç –Ω–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            our_nginx_pids = []
            current_user = os.getlogin()

            for proc in psutil.process_iter(['pid', 'name', 'username']):
                try:
                    proc_info = proc.info
                    if (proc_info['name'] and
                            proc_info['name'].lower() == 'nginx.exe' and
                            proc_info['username'] == current_user):  # –¢–æ–ª—å–∫–æ –Ω–∞—à–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã
                        our_nginx_pids.append(proc_info['pid'])
                        logger.debug(
                            f"–ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å nginx: PID {proc_info['pid']}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {proc_info['username']}")
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue

            # 3. –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞—à–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã
            terminated_count = 0
            for pid in our_nginx_pids:
                try:
                    proc = psutil.Process(pid)
                    logger.debug(f"–ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å nginx PID {pid}")

                    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å gracefully
                    proc.terminate()
                    try:
                        proc.wait(timeout=2)
                        terminated_count += 1
                        continue
                    except psutil.TimeoutExpired:
                        pass

                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                    try:
                        proc.kill()
                        proc.wait(timeout=1)
                        terminated_count += 1
                    except:
                        pass

                except (psutil.NoSuchProcess, psutil.AccessDenied) as e:
                    logger.debug(f"–ü—Ä–æ—Ü–µ—Å—Å {pid} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞: {e}")

            self.is_running = False
            self.process = None

            logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ nginx: {terminated_count}")
            if terminated_count > 0:
                time.sleep(1)  # –î–∞–µ–º —Å–∏—Å—Ç–µ–º–µ –≤—Ä–µ–º—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ nginx –Ω–∞ Windows: {e}")
            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –º–µ—Ç–æ–¥—É
            return self._stop_fallback()

    def _stop_fallback(self):
        """Fallback –º–µ—Ç–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            if self.process:
                try:
                    self.process.terminate()
                    self.process.wait(timeout=2)
                except:
                    try:
                        self.process.kill()
                        self.process.wait(timeout=1)
                    except:
                        pass

            self.is_running = False
            self.process = None
            logger.info("‚úÖ Nginx –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (fallback –º–µ—Ç–æ–¥)")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ fallback –º–µ—Ç–æ–¥–µ: {e}")
            return False

    def _generate_custom_config(self, local_port, remote_url):
        """–°–æ–∑–¥–∞–µ—Ç nginx config —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏"""
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã
        ensure_nginx_directories(self.nginx_dir)

        from core.config_manager import get_app_data_dir
        app_data_dir = get_app_data_dir()
        certs_dir = app_data_dir / "certificates"
        certs_dir.mkdir(exist_ok=True)

        cert_path = certs_dir / "fake.crt"
        key_path = certs_dir / "fake.key"

        # –ö–æ–Ω—Ñ–∏–≥ —Å–æ–∑–¥–∞–µ–º –≤ –ø–∞–ø–∫–µ nginx (–≤ _MEIPASS –∏–ª–∏ —Ä—è–¥–æ–º —Å EXE)
        nginx_conf_dir = self.nginx_dir / "conf"
        nginx_conf_dir.mkdir(exist_ok=True)

        full_config = f'''
    worker_processes  1;

    events {{
        worker_connections  1024;
    }}

    http {{
        include       mime.types;
        default_type  application/octet-stream;

        sendfile        on;
        keepalive_timeout  65;

        server {{
            listen       {local_port} ssl;
            server_name  127.0.0.1;

            ssl_certificate      {cert_path};
            ssl_certificate_key  {key_path};

            ssl_protocols       TLSv1.2 TLSv1.3;
            ssl_ciphers         HIGH:!aNULL:!MD5;

            proxy_connect_timeout 30s;
            proxy_send_timeout    30s;
            proxy_read_timeout    30s;

            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;

            location / {{
                proxy_pass {remote_url};
                proxy_set_header Host {remote_url.split('//')[1]};
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_ssl_verify off;
                proxy_ssl_server_name on;
            }}
        }}
    }}
    '''
        main_conf_path = nginx_conf_dir / "nginx.conf"
        main_conf_path.write_text(full_config, encoding='utf-8')
        logger.info(f"üìÅ –ö–æ–Ω—Ñ–∏–≥ —Å–æ–∑–¥–∞–Ω: {main_conf_path}")

    def _is_nginx_running(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ nginx"""
        try:
            result = subprocess.run(
                ["tasklist", "/fi", "imagename eq nginx.exe"],
                capture_output=True,
                text=True,
                timeout=5,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            return "nginx.exe" in result.stdout
        except:
            return False

    def get_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å"""
        port_available, port_message = check_port_availability(self.local_port)
        port_used_by_us = self.is_port_in_use_by_us(self.local_port) if not port_available else False

        status = {
            'running': self.is_running,
            'port_available': port_available,
            'port_used_by_us': port_used_by_us,  # ‚Üê –ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            'port': self.local_port,
            'url': self.remote_url,
            'is_admin': self.process_manager.is_admin
        }

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if port_message:
            status['port_message'] = port_message
        if port_used_by_us:
            status['port_message'] = "–ü–æ—Ä—Ç –∑–∞–Ω—è—Ç –Ω–∞—à–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º (–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å)"

        return status

    def is_port_in_use_by_us(self, port: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç –Ω–∞—à–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"""
        from utils.port_utils import get_process_using_port
        import psutil
        from pathlib import Path

        process_info = get_process_using_port(port)
        if not process_info:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à nginx –ø—Ä–æ—Ü–µ—Å—Å
        if not self.nginx_dir:
            return False

        try:
            process = psutil.Process(process_info['pid'])
            exe_path = Path(process.exe())

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å nginx –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–∞—à–µ–π –ø–∞–ø–∫–µ
            is_nginx = process_info['name'] and 'nginx' in process_info['name'].lower()
            is_our_path = self.nginx_dir in exe_path.parents

            logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: {process_info['name']}, PID: {process_info['pid']}")
            logger.debug(f"–ü—É—Ç—å: {exe_path}, –Ω–∞—à –ø—É—Ç—å: {is_our_path}")

            return is_nginx and is_our_path

        except (psutil.NoSuchProcess, psutil.AccessDenied, AttributeError) as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É {port}: {e}")
            return False