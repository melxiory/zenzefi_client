# proxy_manager.py
import asyncio
import ssl
import logging
import time
import threading
import sys
from aiohttp import web, ClientSession, TCPConnector, ClientTimeout, ClientConnectorError, ServerTimeoutError
from utils.process_manager import get_process_manager
from utils.port_utils import check_port_availability, get_process_using_port
from core.config_manager import get_app_data_dir

logger = logging.getLogger(__name__)


class ZenzefiProxy:
    def __init__(self, backend_url="http://localhost:8000", proxy_manager=None):
        """
        Args:
            backend_url: URL backend —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è
            proxy_manager: –°—Å—ã–ª–∫–∞ –Ω–∞ ProxyManager (–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–æ–∫–µ–Ω—É)
        """
        self.backend_url = backend_url
        self.proxy_manager = proxy_manager  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ current_token
        # Local URL –ë–ï–ó –ø—Ä–µ—Ñ–∏–∫—Å–∞ - —á–∏—Å—Ç—ã–π URL –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
        # Backend –ø–æ–ª—É—á–∏—Ç –∑–∞–ø—Ä–æ—Å—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º /api/v1/proxy (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–∏)
        self.local_url = "https://127.0.0.1:61000"

        # Connection pool –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        self.connector = None
        self.session = None

        # –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫ backend
        self.connection_semaphore = asyncio.Semaphore(50)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.stats = {
            'total_requests': 0,
            'total_responses': 0,
            'active_connections': 0,
            'errors': 0
        }

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è connection pool –¥–ª—è backend"""
        if self.connector is None:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ connection pooling –¥–ª—è backend (127.0.0.1:8000)
            self.connector = TCPConnector(
                ssl=False,  # Backend –Ω–∞ localhost –±–µ–∑ SSL
                limit=100,  # –ú–∞–∫—Å–∏–º—É–º 100 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                limit_per_host=50,  # –ú–∞–∫—Å–∏–º—É–º 50 –Ω–∞ —Ö–æ—Å—Ç (backend)
                ttl_dns_cache=300,  # DNS –∫—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
                keepalive_timeout=60,  # Keep-alive 60 —Å–µ–∫—É–Ω–¥
                force_close=False,  # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                enable_cleanup_closed=True  # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            )

        if self.session is None:
            self.session = ClientSession(
                connector=self.connector,
                timeout=ClientTimeout(total=90, connect=10)  # –£–≤–µ–ª–∏—á–µ–Ω–æ: 90s total (—É—á–∏—Ç—ã–≤–∞—è backend timeout 60s + –æ–±—Ä–∞–±–æ—Ç–∫–∞), 10s connect
            )

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.session:
            await self.session.close()
            self.session = None
        if self.connector:
            await self.connector.close()
            self.connector = None

    def _is_browser(self, user_agent: str) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä vs –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ User-Agent

        Args:
            user_agent: User-Agent –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞

        Returns:
            True - –±—Ä–∞—É–∑–µ—Ä (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å cookie forwarding)
            False - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å X-Access-Token)
        """
        if not user_agent:
            # –ù–µ—Ç User-Agent - —Å—á–∏—Ç–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º (–±–µ–∑–æ–ø–∞—Å–Ω–µ–µ)
            logger.debug("‚ùì No User-Agent, treating as application")
            return False

        ua_lower = user_agent.lower()

        # –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø - –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        # –ï—Å–ª–∏ User-Agent —Å–æ–¥–µ—Ä–∂–∏—Ç —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ - —ç—Ç–æ —Ç–æ—á–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        apps = [
            'dts', 'monaco', 'mercedes', 'diagnostic',
            'java', 'python', 'curl', 'wget', 'httpie',
            'postman', 'insomnia', 'restclient', 'api',
            'bot', 'crawler', 'spider'
        ]
        for app in apps:
            if app in ua_lower:
                logger.debug(f"üîß Detected application: {user_agent[:60]}...")
                return False

        # –ë–†–ê–£–ó–ï–†–´ - —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º –ø–æ —Ç–∏–ø–∏—á–Ω—ã–º –º–∞—Ä–∫–µ—Ä–∞–º
        browsers = [
            'mozilla', 'chrome', 'safari', 'firefox',
            'edge', 'opera', 'msie', 'trident',
            'chromium', 'webkit'
        ]
        for browser in browsers:
            if browser in ua_lower:
                logger.debug(f"üåê Detected browser: {user_agent[:60]}...")
                return True

        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π User-Agent - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
        # –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–∏—Ç header, –±—Ä–∞—É–∑–µ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å cookie
        logger.debug(f"‚ùì Unknown client (treating as application): {user_agent[:60]}...")
        return False

    async def handle_http(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP/HTTPS –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ backend proxy"""
        self.stats['total_requests'] += 1
        self.stats['active_connections'] += 1

        try:
            # –í–°–ï –∑–∞–ø—Ä–æ—Å—ã –∏–¥—É—Ç —á–µ—Ä–µ–∑ backend!
            # Backend –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
            # - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (–≤–∫–ª—é—á–∞—è –ø–æ–∫–∞–∑ auth —Å—Ç—Ä–∞–Ω–∏—Ü—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            # - –í–∞–ª–∏–¥–∞—Ü–∏—é cookie
            # - –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Zenzefi
            # - Content rewriting
            return await self._proxy_to_backend(request)

        except Exception as e:
            self.stats['errors'] += 1
            self.stats['active_connections'] -= 1
            logger.error(f"‚ùå HTTP Error: {e}")
            return web.Response(text=f"Proxy error: {str(e)}", status=500)

    async def _proxy_to_backend(self, request):
        """
        –ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –í–°–ï –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ backend (127.0.0.1:8000)

        Backend –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
        - –í–∞–ª–∏–¥–∞—Ü–∏—é cookie –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        - –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Zenzefi Server
        - Content rewriting
        """
        backend_url = "http://127.0.0.1:8000"

        # ========== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê/–û–ë–ù–û–í–õ–ï–ù–ò–ï COOKIE –í –ë–†–ê–£–ó–ï–†–ï ==========
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å cookie –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        # –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ—Å–ª–∏:
        # 1. –£ –±—Ä–∞—É–∑–µ—Ä–∞ –ù–ï–¢ cookie zenzefi_access_token
        # 2. –ò–õ–ò cookie –±—Ä–∞—É–∑–µ—Ä–∞ –ù–ï —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º Desktop Client
        if (request.method == "GET" and
            request.path in ("/", "/api/v1/proxy", "/api/v1/proxy/") and
            self.proxy_manager and
            self.proxy_manager.current_token):

            browser_token = request.cookies.get('zenzefi_access_token')
            desktop_token = self.proxy_manager.current_token

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å cookie?
            needs_cookie_update = (
                browser_token is None or  # –£ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ—Ç cookie
                browser_token != desktop_token  # –ò–õ–ò cookie —É—Å—Ç–∞—Ä–µ–ª
            )

            if needs_cookie_update:
                if browser_token is None:
                    logger.info("üç™ Browser has no cookie, setting new cookie...")
                else:
                    logger.info("üîÑ Browser cookie outdated, updating to new token...")
                    logger.debug(f"   Old token: {browser_token[:20]}...")
                    logger.debug(f"   New token: {desktop_token[:20]}...")

                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ backend –∏ –ø–æ–ª—É—á–∞–µ–º max_age
                try:
                    await self.initialize()  # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ session –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞

                    auth_url = f"{self.backend_url.rstrip('/')}/api/v1/proxy/authenticate"

                    async with self.session.post(
                        auth_url,
                        json={"token": desktop_token},
                        timeout=ClientTimeout(total=10)
                    ) as auth_response:

                        if auth_response.status == 200:
                            data = await auth_response.json()
                            max_age = data.get('cookie_max_age', 3600)  # Default 1 hour

                            # –°–æ–∑–¥–∞—ë–º —Ä–µ–¥–∏—Ä–µ–∫—Ç —Å Set-Cookie
                            response = web.Response(status=303)  # See Other redirect
                            response.headers['Location'] = '/'

                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
                            response.set_cookie(
                                name='zenzefi_access_token',
                                value=desktop_token,
                                max_age=max_age,
                                path="/",
                                httponly=True,
                                secure=False,  # Localhost —Å —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º
                                samesite='Lax'
                            )

                            logger.info(f"‚úÖ Cookie set/updated for browser: zenzefi_access_token={desktop_token[:20]}..., max_age={max_age}s")
                            return response
                        else:
                            logger.error(f"‚ùå Token validation failed: {auth_response.status}")
                            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω–æ–µ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ - backend –≤–µ—Ä–Ω–µ—Ç –æ—à–∏–±–∫—É

                except Exception as e:
                    logger.error(f"‚ùå Failed to validate token: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω–æ–µ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
        # ========== –ö–û–ù–ï–¶ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –£–°–¢–ê–ù–û–í–ö–ò COOKIE ==========

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        async with self.connection_semaphore:
            try:
                # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
                body = await request.read()

                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                headers = {}
                for key, value in request.headers.items():
                    key_lower = key.lower()
                    if key_lower not in ['host', 'connection', 'content-length', 'transfer-encoding']:
                        headers[key] = value

                # ========== –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ ==========
                user_agent = request.headers.get('User-Agent', '')
                is_browser = self._is_browser(user_agent)

                if not is_browser:
                    # –ü–†–ò–õ–û–ñ–ï–ù–ò–ï - –¥–æ–±–∞–≤–ª—è–µ–º X-Access-Token –∏–∑ ProxyManager
                    if self.proxy_manager and self.proxy_manager.current_token:
                        headers['X-Access-Token'] = self.proxy_manager.current_token
                        logger.info(
                            f"üîë Added X-Access-Token for application\n"
                            f"   User-Agent: {user_agent[:60]}\n"
                            f"   Path: {request.path}"
                        )
                    else:
                        logger.warning(
                            f"‚ö†Ô∏è Application detected but no token available!\n"
                            f"   User-Agent: {user_agent[:60]}\n"
                            f"   Path: {request.path}\n"
                            f"   ‚Üí Request will likely fail with 401"
                        )
                else:
                    # –ë–†–ê–£–ó–ï–† - –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ cookie forwarding
                    logger.debug(
                        f"üç™ Browser detected, relying on cookie authentication\n"
                        f"   User-Agent: {user_agent[:60]}"
                    )
                # ========== –ö–æ–Ω–µ—Ü –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞ ==========

                # –ü–µ—Ä–µ–¥–∞–µ–º local_url –≤ backend –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ content rewriting
                # Backend –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å URL –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å (–ë–ï–ó –ø—Ä–µ—Ñ–∏–∫—Å–∞ /api/v1/proxy)
                headers['X-Local-Url'] = self.local_url

                # –ö–æ–ø–∏—Ä—É–µ–º cookies –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞
                cookies = {}
                if request.cookies:
                    for name, value in request.cookies.items():
                        cookies[name] = value
                        logger.info(f"üç™ Forwarding cookie to backend: {name}={value[:20]}...")
                else:
                    logger.warning(f"‚ö†Ô∏è No cookies in browser request to {request.path}")

                # –§–æ—Ä–º–∏—Ä—É–µ–º URL –Ω–∞ backend —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º /api/v1/proxy
                # –ë—Ä–∞—É–∑–µ—Ä –≤–∏–¥–∏—Ç —á–∏—Å—Ç—ã–π URL, –Ω–æ backend –ø–æ–ª—É—á–∞–µ—Ç —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
                upstream_url = f"{backend_url}/api/v1/proxy{request.path_qs}"
                logger.debug(f"üîê Proxying to backend: {upstream_url}")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é —Å–µ—Å—Å–∏—é
                await self.initialize()

                async with self.session.request(
                    method=request.method,
                    url=upstream_url,
                    headers=headers,
                    data=body,
                    cookies=cookies,
                    allow_redirects=False
                ) as upstream_response:

                    # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
                    content = await upstream_response.read()

                    # –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
                    response_headers = {}
                    backend_cookies = []  # –°–æ–±–∏—Ä–∞–µ–º Set-Cookie –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç backend

                    for key, value in upstream_response.headers.items():
                        key_lower = key.lower()

                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                        if key_lower in ['content-encoding', 'transfer-encoding', 'connection', 'keep-alive']:
                            continue

                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Set-Cookie - –ù–ï –∫–æ–ø–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
                        if key_lower == 'set-cookie':
                            logger.info(f"üç™ Backend Set-Cookie: {value[:100]}...")
                            backend_cookies.append(value)
                            continue  # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≤ response_headers

                        response_headers[key] = value

                    # –î–æ–±–∞–≤–ª—è–µ–º CORS headers –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ proxy
                    response_headers.update({
                        'Access-Control-Allow-Origin': self.local_url,
                        'Access-Control-Allow-Credentials': 'true',
                        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
                        'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With'
                    })

                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: aiohttp –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç charset –≤ Content-Type header
                    # –£–±–∏—Ä–∞–µ–º charset –∏–∑ Content-Type –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                    if 'Content-Type' in response_headers or 'content-type' in response_headers:
                        content_type_key = 'Content-Type' if 'Content-Type' in response_headers else 'content-type'
                        content_type_value = response_headers[content_type_key]
                        # –£–±–∏—Ä–∞–µ–º "; charset=..." –∏–∑ –∑–Ω–∞—á–µ–Ω–∏—è
                        if '; charset=' in content_type_value:
                            response_headers[content_type_key] = content_type_value.split('; charset=')[0]

                    self.stats['total_responses'] += 1
                    self.stats['active_connections'] -= 1

                    logger.debug(f"Backend response: {upstream_response.status}")

                    # –°–æ–∑–¥–∞–µ–º response
                    response = web.Response(
                        body=content,
                        status=upstream_response.status,
                        headers=response_headers
                    )

                    # –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies –æ—Ç backend –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ –¥–æ–º–µ–Ω–∞
                    if not backend_cookies:
                        logger.debug("No Set-Cookie headers from backend")

                    for cookie_header in backend_cookies:
                        try:
                            # –ü–∞—Ä—Å–∏–º Set-Cookie –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç backend
                            # –§–æ—Ä–º–∞—Ç: name=value; Max-Age=123; Path=/; HttpOnly; Secure; SameSite=lax
                            parts = cookie_header.split(';')
                            if not parts:
                                continue

                            # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - name=value
                            name_value = parts[0].strip()
                            if '=' not in name_value:
                                continue

                            cookie_name, cookie_value = name_value.split('=', 1)

                            # –ü–∞—Ä—Å–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                            max_age = None
                            path = '/'
                            httponly = False
                            secure = False
                            samesite = None

                            for part in parts[1:]:
                                part = part.strip().lower()
                                if part.startswith('max-age='):
                                    try:
                                        max_age = int(part.split('=', 1)[1])
                                    except:
                                        pass
                                elif part.startswith('path='):
                                    path = part.split('=', 1)[1]
                                elif part == 'httponly':
                                    httponly = True
                                elif part == 'secure':
                                    secure = True
                                elif part.startswith('samesite='):
                                    samesite = part.split('=', 1)[1]

                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ (127.0.0.1:61000)
                            # –í–ê–ñ–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º Secure –¥–ª—è localhost (HTTPS –Ω–∞ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ)
                            response.set_cookie(
                                name=cookie_name,
                                value=cookie_value,
                                max_age=max_age,
                                path=path,
                                httponly=httponly,
                                secure=False,  # Localhost —Å —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º
                                samesite=samesite if samesite else 'Lax'
                            )

                            logger.info(f"‚úÖ Cookie set for local proxy: {cookie_name}={cookie_value[:20]}..., max_age={max_age}, path={path}, httponly={httponly}, secure={False}, samesite={samesite if samesite else 'Lax'}")

                        except Exception as e:
                            logger.error(f"Failed to parse Set-Cookie: {cookie_header[:50]}... Error: {e}")

                    return response

            except ClientConnectorError as e:
                self.stats['errors'] += 1
                self.stats['active_connections'] -= 1
                logger.error(f"‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

                return web.Response(
                    text=(
                        "‚ùå Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ backend —Å–µ—Ä–≤–µ—Ä:\n"
                        "poetry run uvicorn app.main:app --reload\n\n"
                        f"–î–µ—Ç–∞–ª–∏: {str(e)}"
                    ),
                    status=502,
                    content_type="text/plain; charset=utf-8"
                )

            except ServerTimeoutError as e:
                self.stats['errors'] += 1
                self.stats['active_connections'] -= 1
                logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å backend: {e}")

                return web.Response(
                    text=(
                        "‚ùå –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å backend —Å–µ—Ä–≤–µ—Ä–æ–º!\n\n"
                        "Backend —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                        "- Backend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç\n"
                        "- –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ç—å—é\n\n"
                        f"–î–µ—Ç–∞–ª–∏: {str(e)}"
                    ),
                    status=504,
                    content_type="text/plain; charset=utf-8"
                )

            except Exception as e:
                self.stats['errors'] += 1
                self.stats['active_connections'] -= 1
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ backend: {e}", exc_info=True)

                return web.Response(
                    text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n{str(e)}",
                    status=502,
                    content_type="text/plain; charset=utf-8"
                )

    async def router(self, request):
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ backend proxy"""
        # –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã (HTTP/HTTPS) –∏–¥—É—Ç —á–µ—Ä–µ–∑ handle_http ‚Üí backend
        # Backend –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é, –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ content rewriting
        return await self.handle_http(request)

    def get_full_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∫—Å–∏"""
        return {
            'requests': self.stats['total_requests'],
            'responses': self.stats['total_responses'],
            'active': self.stats['active_connections'],
            'errors': self.stats['errors']
        }


class ProxyManager:
    def __init__(self):
        self.is_running = False
        self.process_manager = get_process_manager()
        self.remote_url = ""
        self.local_port = 61000
        self.proxy = None
        self.runner = None
        self.site = None
        self.loop = None
        self.thread = None
        self.app_name = "Zenzefi Proxy"

        # Security: tokens and cookies in memory only
        self.current_token = None    # Access token (RAM only)
        self.backend_url = None       # Backend URL (RAM only)
        self.cookie_jar = None        # Cookie jar (RAM only)

    def start(self, backend_url="http://localhost:8000", token=None):
        """
        –ó–∞–ø—É—Å–∫ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –Ω–∞ backend

        Args:
            backend_url: URL backend —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            token: Access token –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ –¥–∏—Å–∫)

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
        """
        if self.is_running:
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return False

        if not token:
            logger.error("‚ùå Token is required to start proxy")
            return False

        if not backend_url:
            logger.error("‚ùå Backend URL is required")
            return False

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å (–ù–ï –Ω–∞ –¥–∏—Å–∫!)
        self.current_token = token
        self.backend_url = backend_url

        logger.info(
            f"üîê Token configured (length: {len(token)} chars)\n"
            f"üåê Backend: {backend_url}"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞
        local_port = 61000  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç
        self.local_port = local_port

        if not check_port_availability(local_port):
            logger.warning(f"‚ö†Ô∏è –ü–æ—Ä—Ç {local_port} –∑–∞–Ω—è—Ç")

            process_info = get_process_using_port(local_port)
            if process_info:
                logger.info(
                    f"üìå –ü—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É {local_port}:\n"
                    f"   PID: {process_info.get('pid')}\n"
                    f"   Name: {process_info.get('name')}\n"
                    f"   Path: {process_info.get('exe')}"
                )

                # –ü—ã—Ç–∞–µ–º—Å—è —É–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
                pm = get_process_manager()
                if pm.kill_process_on_port(local_port):
                    logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É {local_port} –∑–∞–≤–µ—Ä—à–µ–Ω")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç {local_port}")
                    return False
            else:
                logger.error(f"‚ùå –ü–æ—Ä—Ç {local_port} –∑–∞–Ω—è—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º")
                return False

        try:
            # –°–æ–∑–¥–∞—ë–º event loop –¥–ª—è –ø–æ—Ç–æ–∫–∞
            self.loop = asyncio.new_event_loop()

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.thread = threading.Thread(
                target=self._run_server,
                daemon=True
            )
            self.thread.start()

            # –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞ (–º–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥)
            for _ in range(50):
                if self.is_running:
                    break
                time.sleep(0.1)

            if not self.is_running:
                logger.error("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
                return False

            logger.info(f"‚úÖ Proxy server started on https://127.0.0.1:{local_port}")

            # –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –ù–ê BACKEND
            logger.info("üîê Authenticating with backend...")
            auth_success = self._authenticate_with_backend()

            if not auth_success:
                logger.error("‚ùå Authentication failed, stopping proxy")
                self.stop()
                return False

            logger.info("‚úÖ Successfully authenticated with backend")
            return True

        except Exception as e:
            logger.error(f"‚ùå Failed to start proxy: {e}")
            self.stop()
            return False

    def _run_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º event loop"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            self.loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self.loop)

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            self.loop.run_until_complete(self._start_server())

            # –ó–∞–ø—É—Å–∫–∞–µ–º event loop
            self.loop.run_forever()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ event loop: {e}")
            self.is_running = False
        finally:
            if self.loop:
                self.loop.close()

    async def _start_server(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
            app_data_dir = get_app_data_dir()
            certs_dir = app_data_dir / "certificates"
            cert_path = certs_dir / "fake.crt"
            key_path = certs_dir / "fake.key"

            # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
            ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
            ssl_context.load_cert_chain(certfile=str(cert_path), keyfile=str(key_path))

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Å–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π backend_url –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ self
            self.proxy = ZenzefiProxy(
                backend_url=self.backend_url,
                proxy_manager=self  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–æ–∫–µ–Ω—É
            )
            # Local URL –ë–ï–ó –ø—Ä–µ—Ñ–∏–∫—Å–∞ - –¥–ª—è —á–∏—Å—Ç—ã—Ö URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            self.proxy.local_url = f"https://127.0.0.1:{self.local_port}"

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º connection pool
            await self.proxy.initialize()

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            app = web.Application()
            app.router.add_route('*', '/{path:.*}', self.proxy.router)

            # –°–æ–∑–¥–∞–µ–º runner
            self.runner = web.AppRunner(app, access_log=None)
            await self.runner.setup()

            # –°–æ–∑–¥–∞–µ–º site
            self.site = web.TCPSite(
                self.runner,
                host='127.0.0.1',
                port=self.local_port,
                ssl_context=ssl_context,
            )

            await self.site.start()
            self.is_running = True
            logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.local_port}")
            logger.info(f"üìä Connection pool: –ª–∏–º–∏—Ç={self.proxy.connector.limit}, per_host={self.proxy.connector.limit_per_host}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            self.is_running = False

    def _authenticate_with_backend(self):
        """
        –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ backend —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ POST /api/v1/proxy/authenticate

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
        """
        if not self.current_token or not self.backend_url:
            logger.error("‚ùå No token or backend URL for authentication")
            return False

        try:
            import requests

            auth_url = f"{self.backend_url.rstrip('/')}/api/v1/proxy/authenticate"

            logger.info(f"üîê Authenticating with: {auth_url}")
            logger.debug(f"   Token length: {len(self.current_token)} chars")

            # POST –∑–∞–ø—Ä–æ—Å —Å —Ç–æ–∫–µ–Ω–æ–º –≤ body
            response = requests.post(
                auth_url,
                json={"token": self.current_token},
                timeout=10,
                proxies={"http": None, "https": None}  # –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è localhost
            )

            if response.status_code == 200:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º cookie –≤ –ø–∞–º—è—Ç—å
                self.cookie_jar = response.cookies

                data = response.json()
                logger.info(
                    f"‚úÖ Authentication successful!\n"
                    f"   User ID: {data.get('user_id')}\n"
                    f"   Token ID: {data.get('token_id')}\n"
                    f"   Activated: {data.get('is_activated')}\n"
                    f"   Expires: {data.get('expires_at')}\n"
                    f"   Cookie set: {data.get('cookie_set')}"
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ cookie –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                if 'zenzefi_access_token' in self.cookie_jar:
                    logger.debug(f"   Cookie 'zenzefi_access_token' saved in memory")
                else:
                    logger.warning(f"   ‚ö†Ô∏è Cookie not found in response")

                return True
            else:
                logger.error(
                    f"‚ùå Authentication failed!\n"
                    f"   Status: {response.status_code}\n"
                    f"   Response: {response.text}"
                )
                return False

        except requests.ConnectionError as e:
            logger.error(
                f"‚ùå Cannot connect to backend server!\n"
                f"   URL: {auth_url}\n"
                f"   Error: {e}\n"
                f"   ‚Üí Is backend running?"
            )
            return False
        except requests.Timeout:
            logger.error(f"‚ùå Authentication request timed out (>10s)")
            return False
        except requests.RequestException as e:
            logger.error(f"‚ùå Authentication request error: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå Unexpected authentication error: {e}")
            logger.exception("Full traceback:")
            return False

    def _logout_from_backend(self):
        """
        Logout –æ—Ç backend —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ DELETE /api/v1/proxy/logout

        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏
        """
        if not self.backend_url:
            logger.debug("No backend URL, skipping logout")
            return

        if not self.cookie_jar:
            logger.debug("No cookie jar, skipping logout")
            return

        try:
            import requests

            logout_url = f"{self.backend_url.rstrip('/')}/api/v1/proxy/logout"

            logger.info(f"üö™ Logging out from: {logout_url}")

            # DELETE –∑–∞–ø—Ä–æ—Å —Å cookie
            response = requests.delete(
                logout_url,
                cookies=self.cookie_jar,
                timeout=10,
                proxies={"http": None, "https": None}  # –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è localhost
            )

            if response.status_code == 200:
                data = response.json()
                logger.info(
                    f"‚úÖ Logged out successfully\n"
                    f"   Message: {data.get('message', 'N/A')}"
                )
            else:
                logger.warning(
                    f"‚ö†Ô∏è Logout returned non-200 status\n"
                    f"   Status: {response.status_code}\n"
                    f"   Response: {response.text}"
                )

        except requests.RequestException as e:
            # Logout errors are non-critical
            logger.warning(f"‚ö†Ô∏è Logout request error (non-critical): {e}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Unexpected logout error (non-critical): {e}")

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞ —Å logout"""
        if not self.is_running:
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return

        try:
            logger.info("üõë Stopping proxy...")

            # 1. LOGOUT –û–¢ BACKEND (–ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Å–µ—Ä–≤–µ—Ä–∞)
            self._logout_from_backend()

            self.is_running = False

            # 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º aiohttp —Å–µ—Ä–≤–µ—Ä
            if self.loop and self.loop.is_running():
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤ event loop
                asyncio.run_coroutine_threadsafe(self._stop_server(), self.loop)
                time.sleep(2)

                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º event loop
                self.loop.call_soon_threadsafe(self.loop.stop)

            # 3. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
            if self.thread and self.thread.is_alive():
                self.thread.join(timeout=5)

            # 4. –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• –ò–ó –ü–ê–ú–Ø–¢–ò (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
            self.current_token = None
            self.backend_url = None
            self.cookie_jar = None

            logger.info("üßπ Security cleanup: token, backend_url, cookies cleared from memory")

            # 5. –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if self.proxy:
                stats = self.proxy.get_full_stats()
                logger.info(
                    f"üìä Session statistics:\n"
                    f"   Total requests: {stats.get('requests', 0)}\n"
                    f"   Total responses: {stats.get('responses', 0)}\n"
                    f"   Errors: {stats.get('errors', 0)}\n"
                    f"   Active connections: {stats.get('active', 0)}"
                )

            logger.info("‚úÖ Proxy stopped and cleaned up successfully")

        except Exception as e:
            logger.error(f"‚ùå Error stopping proxy: {e}")
            logger.exception("Full traceback:")

    async def _stop_server(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            if self.site:
                await self.site.stop()
            if self.runner:
                await self.runner.cleanup()
            if self.proxy:
                await self.proxy.cleanup()
            logger.debug("‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

    def get_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏"""
        port_available, port_message = check_port_availability(self.local_port)
        port_used_by_us = self.is_port_in_use_by_us(self.local_port) if not port_available else False

        status = {
            'running': self.is_running,
            'port_available': port_available,
            'port_used_by_us': port_used_by_us,
            'port': self.local_port,
            'url': self.remote_url,
            'is_admin': self.process_manager.is_admin
        }

        if port_message:
            status['port_message'] = port_message
        if port_used_by_us:
            status['port_message'] = "–ü–æ—Ä—Ç –∑–∞–Ω—è—Ç –Ω–∞—à–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º (–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å)"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∫—Å–∏
        if self.proxy and self.is_running:
            status['proxy_stats'] = self.proxy.get_full_stats()

        return status

    def get_proxy_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∫—Å–∏"""
        if self.proxy and self.is_running:
            return self.proxy.get_full_stats()
        return None

    def is_port_in_use_by_us(self, port: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç –Ω–∞—à–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"""
        from utils.port_utils import get_process_using_port
        import psutil
        from pathlib import Path

        process_info = get_process_using_port(port)
        if not process_info:
            return False

        try:
            process = psutil.Process(process_info['pid'])
            exe_path = Path(process.exe())

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ Python –ø—Ä–æ—Ü–µ—Å—Å
            is_python = 'python' in process_info['name'].lower()

            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—à EXE —Ñ–∞–π–ª
            if getattr(sys, 'frozen', False):
                current_exe = Path(sys.executable)
                is_our_path = exe_path == current_exe
            else:
                # –í dev —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
                is_our_path = is_python

            logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: {process_info['name']}, PID: {process_info['pid']}")
            logger.debug(f"–ü—É—Ç—å: {exe_path}, –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å: {is_our_path}")

            return is_python and is_our_path

        except (psutil.NoSuchProcess, psutil.AccessDenied, AttributeError) as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É {port}: {e}")
            return False


# –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
_proxy_manager = None


def get_proxy_manager() -> ProxyManager:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ProxyManager"""
    global _proxy_manager
    if _proxy_manager is None:
        _proxy_manager = ProxyManager()
    return _proxy_manager