# proxy_manager.py
import asyncio
import ssl
import logging
import time
import threading
from aiohttp import web, ClientSession, WSMsgType
import aiohttp
from utils.process_manager import get_process_manager
from utils.port_utils import check_port_availability, get_process_using_port
from core.config_manager import get_app_data_dir
from core.proxy import CacheManager, ContentRewriter
from core.auth_manager import get_auth_manager
import sys
import gzip
import zlib

logger = logging.getLogger(__name__)


# –ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
LRUCache = CacheManager


class ZenzefiProxy:
    # –†–∞–∑–º–µ—Ä –¥–ª—è streaming (1MB)
    _STREAMING_THRESHOLD = 1024 * 1024

    def __init__(self):
        self.upstream_url = "https://zenzefi.melxiory.ru"
        self.local_url = "https://127.0.0.1:61000"
        self.ssl_context = None

        # –ö—ç—à –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        self.cache = LRUCache(maxsize=100)

        # ContentRewriter –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ URL
        self.content_rewriter = ContentRewriter(
            upstream_url=self.upstream_url,
            local_url=self.local_url,
            cache_manager=self.cache
        )

        # Connection pool –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        self.connector = None
        self.session = None

        # –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        self.connection_semaphore = asyncio.Semaphore(50)

        # Request deduplication - —Å–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.pending_requests = {}  # {request_key: (asyncio.Event, result_holder)}

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.stats = {
            'total_requests': 0,
            'total_responses': 0,
            'active_connections': 0,
            'compressed_responses': 0,
            'compression_saved_bytes': 0,
            'streamed_responses': 0,
            'errors': 0,
            'websocket_connections': 0,
            'deduplicated_requests': 0
        }

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è connection pool —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è keep-alive"""
        if self.connector is None:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ connection pooling —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π keep-alive
            self.connector = aiohttp.TCPConnector(
                ssl=False,
                limit=100,  # –ú–∞–∫—Å–∏–º—É–º 100 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                limit_per_host=30,  # –ú–∞–∫—Å–∏–º—É–º 30 –Ω–∞ —Ö–æ—Å—Ç (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è HTTP/1.1)
                ttl_dns_cache=300,  # DNS –∫—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
                keepalive_timeout=60,  # Keep-alive 60 —Å–µ–∫—É–Ω–¥
                force_close=False,  # –ù–ï –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–∫—Ä–∏—Ç–∏—á–Ω–æ!)
                enable_cleanup_closed=True  # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            )

        if self.session is None:
            self.session = ClientSession(
                connector=self.connector,
                timeout=aiohttp.ClientTimeout(total=30, connect=10)
            )

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.session:
            await self.session.close()
            self.session = None
        if self.connector:
            await self.connector.close()
            self.connector = None


    def _is_compressible(self, content_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ —Å–∂–∏–º–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç"""
        compressible_types = [
            'text/', 'application/json', 'application/javascript',
            'application/xml', 'application/x-javascript'
        ]
        return any(ct in content_type.lower() for ct in compressible_types)

    def _compress_content(self, content: bytes, accept_encoding: str) -> tuple[bytes, str]:
        """–°–∂–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É—è gzip –∏–ª–∏ deflate

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Å–∂–∞—Ç—ã–π_–∫–æ–Ω—Ç–µ–Ω—Ç, encoding)
        """
        # –ù–µ —Å–∂–∏–º–∞–µ–º –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π (< 1KB)
        if len(content) < 1024:
            return content, None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –º–µ—Ç–æ–¥ —Å–∂–∞—Ç–∏—è
        accept_encoding_lower = accept_encoding.lower()

        # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º gzip –∫–∞–∫ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–π
        if 'gzip' in accept_encoding_lower:
            try:
                compressed = gzip.compress(content, compresslevel=6)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∂–∞—Ç–∏–µ –¥–∞–ª–æ –≤—ã–≥–æ–¥—É
                if len(compressed) < len(content):
                    logger.debug(f"üóúÔ∏è gzip: {len(content)} ‚Üí {len(compressed)} bytes ({len(compressed)/len(content)*100:.1f}%)")
                    return compressed, 'gzip'
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ gzip —Å–∂–∞—Ç–∏—è: {e}")

        # Fallback –Ω–∞ deflate
        elif 'deflate' in accept_encoding_lower:
            try:
                compressed = zlib.compress(content, level=6)
                if len(compressed) < len(content):
                    logger.debug(f"üóúÔ∏è deflate: {len(content)} ‚Üí {len(compressed)} bytes ({len(compressed)/len(content)*100:.1f}%)")
                    return compressed, 'deflate'
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ deflate —Å–∂–∞—Ç–∏—è: {e}")

        # –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å –∏–ª–∏ —Å–∂–∞—Ç–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        return content, None

    async def handle_http(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP/HTTPS –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ streaming"""
        self.stats['total_requests'] += 1
        self.stats['active_connections'] += 1

        try:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è auth —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º HTML auth —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
            # 1. –ï—Å—Ç—å token –≤ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö (–ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –∏–∑ Desktop Client)
            # 2. –ò–õ–ò –±—Ä–∞—É–∑–µ—Ä –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç HTML (Accept: text/html) –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å
            if request.path == '/api/v1/proxy' or request.path == '/api/v1/proxy/':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ token –≤ query
                has_token = 'token' in request.query

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Accept header
                accept_header = request.headers.get('Accept', '')
                wants_html = 'text/html' in accept_header

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º auth —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å token –ò–õ–ò –±—Ä–∞—É–∑–µ—Ä –ø—Ä–æ—Å–∏—Ç HTML
                if has_token or (wants_html and not 'application/json' in accept_header):
                    self.stats['active_connections'] -= 1
                    return await self._serve_auth_page(request)

                # –ò–Ω–∞—á–µ –ø—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ backend (–¥–ª—è API –∫–ª–∏–µ–Ω—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö JSON)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
            cache_key = self.cache.generate_key(request.path, request.query_string)

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤)
            if request.method == 'GET':
                cached = self.cache.get(cache_key)
                if cached:
                    content, headers, status = cached
                    logger.debug(f"‚úÖ Cache HIT: {request.path}")
                    self.stats['total_responses'] += 1
                    self.stats['active_connections'] -= 1
                    return web.Response(body=content, status=status, headers=headers)

                # Request Deduplication: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                if cache_key in self.pending_requests:
                    logger.debug(f"üîÑ Request deduplication: waiting for {request.path}")
                    self.stats['deduplicated_requests'] += 1
                    self.stats['active_connections'] -= 1

                    # –ñ–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    event, result_holder = self.pending_requests[cache_key]
                    await event.wait()  # –ñ–¥—ë–º –ø–æ–∫–∞ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è

                    self.stats['total_responses'] += 1

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å–æ–∑–¥–∞—ë–º –ù–û–í–´–ô Response –æ–±—ä–µ–∫—Ç
                    if 'body' in result_holder:
                        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π Response —Å –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º body
                        return web.Response(
                            body=result_holder['body'],
                            status=result_holder['status'],
                            headers=result_holder['headers']
                        )
                    elif 'error' in result_holder:
                        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —É–ø–∞–ª, –¥–µ–ª–∞–µ–º —Å–≤–æ–π
                        logger.debug(f"‚ö†Ô∏è Original request failed: {result_holder['error']}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    else:
                        # –°—Ç—Ä–∞–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è, –¥–µ–ª–∞–µ–º —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å
                        logger.warning("‚ö†Ô∏è No result in holder, making new request")

            # –°–æ–∑–¥–∞—ë–º Event –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è GET)
            dedup_event = None
            result_holder = {}
            if request.method == 'GET' and cache_key not in self.pending_requests:
                dedup_event = asyncio.Event()
                self.pending_requests[cache_key] = (dedup_event, result_holder)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            async with self.connection_semaphore:
                body = await request.read()

                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                headers = {}
                for key, value in request.headers.items():
                    key_lower = key.lower()
                    if key_lower not in ['host', 'connection', 'content-length', 'transfer-encoding']:
                        headers[key] = value

                header_host = self.upstream_url.replace('https://', '').replace('http://', '')
                headers.update({
                    "Host": f"{header_host}",
                    "X-Real-IP": request.remote,
                    "X-Forwarded-For": request.remote,
                    "X-Forwarded-Proto": "https"
                })

                upstream_url = f"{self.upstream_url}{request.path_qs}"

                # –ö–æ–ø–∏—Ä—É–µ–º cookies –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ backend
                # –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è cookie-based –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!
                cookies = {}
                for name, value in request.cookies.items():
                    cookies[name] = value
                    logger.debug(f"üç™ Forwarding cookie: {name}")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é —Å–µ—Å—Å–∏—é
                await self.initialize()

                async with self.session.request(
                        method=request.method,
                        url=upstream_url,
                        headers=headers,
                        data=body,
                        cookies=cookies,  # –ö–†–ò–¢–ò–ß–ù–û! –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º cookies –Ω–∞ backend
                        allow_redirects=False
                ) as upstream_response:

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 401 (Unauthorized)
                    if upstream_response.status == 401:
                        logger.error("‚ùå Unauthorized: Cookie –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫")
                        self.stats['errors'] += 1
                        self.stats['total_responses'] += 1
                        self.stats['active_connections'] -= 1

                        return web.Response(
                            text="‚ö†Ô∏è –°–µ—Å—Å–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–∞.\n\n"
                                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
                            status=401,
                            content_type="text/plain"
                        )

                    response_headers = {}
                    for key, value in upstream_response.headers.items():
                        key_lower = key.lower()

                        if key_lower in ['content-encoding', 'transfer-encoding', 'connection', 'keep-alive']:
                            continue

                        if key_lower == 'access-control-allow-origin':
                            value = self.local_url

                        if key_lower == 'location':
                            value = value.replace(self.upstream_url, self.local_url)

                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Set-Cookie –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏
                        if key_lower == 'set-cookie':
                            logger.debug(f"üç™ Forwarding Set-Cookie from backend: {value[:50]}...")

                        response_headers[key] = value

                    response_headers.update({
                        'Access-Control-Allow-Origin': self.local_url,
                        'Access-Control-Allow-Credentials': 'true',
                        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
                        'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With'
                    })

                    content_type = upstream_response.headers.get('content-type', '').lower()
                    content_length = int(upstream_response.headers.get('content-length', 0))

                    # Streaming –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (>1MB)
                    if content_length > self._STREAMING_THRESHOLD:
                        logger.debug(f"üåä Streaming: {request.path} ({content_length} bytes)")
                        self.stats['streamed_responses'] += 1

                        response = web.StreamResponse(
                            status=upstream_response.status,
                            headers=response_headers
                        )
                        await response.prepare(request)

                        async for chunk in upstream_response.content.iter_chunked(8192):
                            await response.write(chunk)

                        await response.write_eof()
                        self.stats['total_responses'] += 1
                        self.stats['active_connections'] -= 1
                        return response

                    # –û–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                    content = await upstream_response.read()

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    if any(x in content_type for x in ['text/', 'javascript', 'json']):
                        try:
                            content_str = content.decode('utf-8')
                            content_str = self.content_rewriter.rewrite(content_str, content_type)
                            content = content_str.encode('utf-8')
                        except:
                            pass

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∂–∞—Ç–∏–µ –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç
                    original_size = len(content)
                    accept_encoding = request.headers.get('Accept-Encoding', '')
                    if accept_encoding and self._is_compressible(content_type):
                        compressed_content, encoding = self._compress_content(content, accept_encoding)
                        if encoding:
                            saved_bytes = original_size - len(compressed_content)
                            self.stats['compressed_responses'] += 1
                            self.stats['compression_saved_bytes'] += saved_bytes
                            content = compressed_content
                            response_headers['Content-Encoding'] = encoding
                            response_headers['Content-Length'] = str(len(content))

                    # –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω—ã–µ keep-alive –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    response_headers['Connection'] = 'keep-alive'
                    response_headers['Keep-Alive'] = 'timeout=60, max=100'

                    # –ö—ç—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
                    if request.method == 'GET' and self.cache.is_cacheable(request.path, content_type):
                        self.cache.put(cache_key, (content, dict(response_headers), upstream_response.status))
                        logger.debug(f"üíæ Cached: {request.path}")

                    self.stats['total_responses'] += 1
                    self.stats['active_connections'] -= 1

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º Response
                    if dedup_event:
                        result_holder['body'] = content
                        result_holder['status'] = upstream_response.status
                        result_holder['headers'] = dict(response_headers)
                        dedup_event.set()  # –£–≤–µ–¥–æ–º–ª—è–µ–º –∂–¥—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
                        # –û—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                        asyncio.create_task(self._cleanup_pending_request(cache_key))

                    # –°–æ–∑–¥–∞—ë–º Response –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    return web.Response(
                        body=content,
                        status=upstream_response.status,
                        headers=response_headers
                    )

        except Exception as e:
            self.stats['errors'] += 1
            self.stats['active_connections'] -= 1
            logger.error(f"‚ùå HTTP Error: {e}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            if 'dedup_event' in locals() and dedup_event:
                result_holder['error'] = str(e)
                dedup_event.set()
                asyncio.create_task(self._cleanup_pending_request(cache_key))

            return web.Response(text=f"Proxy error: {str(e)}", status=500)

    async def _serve_auth_page(self, request):
        """
        –°–ª—É–∂–µ–±–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

        –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è:
        - /api/v1/proxy?token=... ‚Üí HTML auth —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (—ç—Ç–æ—Ç –º–µ—Ç–æ–¥)
        - /api/v1/proxy/ (Accept: text/html) ‚Üí HTML auth —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (—ç—Ç–æ—Ç –º–µ—Ç–æ–¥)
        - /api/v1/proxy/ (Accept: application/json) ‚Üí –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ backend

        –ü—Ä–æ—Ü–µ—Å—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:
        1. –ß–∏—Ç–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥–∞
        2. JavaScript –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –Ω–∞ backend /authenticate endpoint
        3. Backend —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç HTTP-only secure cookie
        4. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        5. –í—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç cookie
        """

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–∫–µ–Ω –≤ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        query = request.query
        token = query.get('token', '')

        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç –≤ query, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        if not token:
            from core.config_manager import get_config
            config = get_config()
            token = config.get_access_token() or ''

        html = f"""
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Zenzefi Authentication</title>
            <style>
                body {{
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    min-height: 100vh;
                    margin: 0;
                    color: white;
                }}
                .container {{
                    background: rgba(255, 255, 255, 0.1);
                    backdrop-filter: blur(10px);
                    padding: 40px;
                    border-radius: 20px;
                    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
                    text-align: center;
                    max-width: 500px;
                }}
                .spinner {{
                    border: 4px solid rgba(255, 255, 255, 0.3);
                    border-radius: 50%;
                    border-top: 4px solid white;
                    width: 50px;
                    height: 50px;
                    animation: spin 1s linear infinite;
                    margin: 20px auto;
                }}
                @keyframes spin {{
                    0% {{ transform: rotate(0deg); }}
                    100% {{ transform: rotate(360deg); }}
                }}
                .message {{
                    font-size: 18px;
                    margin: 20px 0;
                }}
                .error {{
                    background: rgba(220, 38, 38, 0.8);
                    padding: 15px;
                    border-radius: 10px;
                    margin-top: 20px;
                }}
                .success {{
                    background: rgba(34, 197, 94, 0.8);
                    padding: 15px;
                    border-radius: 10px;
                    margin-top: 20px;
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üîê Zenzefi Authentication</h1>
                <div class="spinner" id="spinner"></div>
                <div class="message" id="message">Authenticating...</div>
            </div>

            <script>
                // –í–ê–ñ–ù–û: backendUrl –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π backend, –∞ –ù–ï –Ω–∞ Zenzefi Server
                const backendUrl = 'http://127.0.0.1:8000';
                const zenzefiUrl = '{self.upstream_url}';
                const token = '{token}' || sessionStorage.getItem('zenzefi_token');

                async function authenticate() {{
                    const spinner = document.getElementById('spinner');
                    const message = document.getElementById('message');

                    if (!token) {{
                        spinner.style.display = 'none';
                        message.innerHTML = '<div class="error">‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!<br>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.</div>';
                        return;
                    }}

                    try {{
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ backend –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cookie
                        const response = await fetch(`${{backendUrl}}/api/v1/proxy/authenticate`, {{
                            method: 'POST',
                            headers: {{
                                'Content-Type': 'application/json',
                            }},
                            body: JSON.stringify({{ token: token }}),
                            credentials: 'include'  // –í–∞–∂–Ω–æ –¥–ª—è cookie
                        }});

                        if (response.ok) {{
                            const data = await response.json();

                            spinner.style.display = 'none';
                            message.innerHTML = `
                                <div class="success">
                                    ‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!<br>
                                    <small>User ID: ${{data.user_id}}</small><br>
                                    <small>–ò—Å—Ç–µ–∫–∞–µ—Ç: ${{data.expires_at ? new Date(data.expires_at).toLocaleString() : '–ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}}</small><br>
                                    <br>
                                    –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...
                                </div>
                            `;

                            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                            setTimeout(() => {{
                                window.location.href = '${{backendUrl}}/api/v1/proxy/';
                            }}, 2000);

                        }} else {{
                            const errorData = await response.json();

                            spinner.style.display = 'none';
                            message.innerHTML = `
                                <div class="error">
                                    ‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!<br>
                                    <small>${{errorData.detail || 'Unknown error'}}</small>
                                </div>
                            `;
                        }}

                    }} catch (error) {{
                        spinner.style.display = 'none';
                        message.innerHTML = `
                            <div class="error">
                                ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏!<br>
                                <small>${{error.message}}</small><br>
                                <small>Backend –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ ${{backendUrl}}?</small>
                            </div>
                        `;
                        console.error('Authentication error:', error);
                    }}
                }}

                // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
                authenticate();
            </script>
        </body>
        </html>
        """

        return web.Response(
            text=html,
            content_type='text/html',
            headers={
                'Cache-Control': 'no-store, no-cache, must-revalidate',
                'Pragma': 'no-cache',
                'Expires': '0'
            }
        )

    async def _cleanup_pending_request(self, cache_key: str, delay: float = 0.1):
        """–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ pending_requests"""
        await asyncio.sleep(delay)
        if cache_key in self.pending_requests:
            del self.pending_requests[cache_key]
            logger.debug(f"üßπ Cleaned up pending request: {cache_key[:16]}...")

    async def handle_websocket(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º"""
        ws_local = web.WebSocketResponse(max_msg_size=10 * 1024 * 1024)  # 10MB –ª–∏–º–∏—Ç
        await ws_local.prepare(request)

        logger.debug(f"üîå WebSocket: {request.path}")

        try:
            async with self.connection_semaphore:
                upstream_ws_url = f"wss://zenzefi.melxiory.ru{request.path_qs}"

                headers = {
                    "Host": "zenzefi.melxiory.ru",
                    "Origin": self.upstream_url,
                    "X-Real-IP": request.remote,
                    "X-Forwarded-For": request.remote
                }

                if 'Cookie' in request.headers:
                    headers['Cookie'] = request.headers['Cookie']
                if 'Authorization' in request.headers:
                    headers['Authorization'] = request.headers['Authorization']

                for key in ['User-Agent', 'Accept', 'Accept-Language', 'Sec-WebSocket-Protocol']:
                    if key in request.headers:
                        headers[key] = request.headers[key]

                cookie_jar = aiohttp.CookieJar()
                for name, value in request.cookies.items():
                    cookie_jar.update_cookies({name: value})

                await self.initialize()

                async with self.session.ws_connect(
                        upstream_ws_url,
                        headers=headers,
                        ssl=False,
                        max_msg_size=10 * 1024 * 1024
                ) as ws_upstream:

                    async def forward_to_upstream():
                        async for msg in ws_local:
                            if msg.type == WSMsgType.TEXT:
                                await ws_upstream.send_str(msg.data)
                            elif msg.type == WSMsgType.BINARY:
                                await ws_upstream.send_bytes(msg.data)
                            elif msg.type == WSMsgType.CLOSE:
                                await ws_upstream.close()
                                break

                    async def forward_to_local():
                        async for msg in ws_upstream:
                            if msg.type == WSMsgType.TEXT:
                                await ws_local.send_str(msg.data)
                            elif msg.type == WSMsgType.BINARY:
                                await ws_local.send_bytes(msg.data)
                            elif msg.type == WSMsgType.CLOSE:
                                await ws_local.close()
                                break

                    await asyncio.gather(
                        forward_to_upstream(),
                        forward_to_local(),
                        return_exceptions=True
                    )

        except Exception as e:
            logger.error(f"‚ùå WebSocket Error: {e}")
        finally:
            if not ws_local.closed:
                await ws_local.close()

        return ws_local

    async def router(self, request):
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É HTTP –∏ WebSocket"""
        if request.headers.get('Upgrade', '').lower() == 'websocket':
            return await self.handle_websocket(request)
        else:
            return await self.handle_http(request)

    def get_cache_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        return self.cache.get_stats()

    def get_full_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∫—Å–∏"""
        cache_stats = self.cache.get_stats()

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è
        compression_ratio = 0
        if self.stats['compressed_responses'] > 0:
            avg_saved = self.stats['compression_saved_bytes'] / self.stats['compressed_responses']
            compression_ratio = f"{avg_saved:.0f}"

        return {
            'requests': self.stats['total_requests'],
            'responses': self.stats['total_responses'],
            'active': self.stats['active_connections'],
            'errors': self.stats['errors'],
            'compressed': self.stats['compressed_responses'],
            'compression_saved': f"{self.stats['compression_saved_bytes'] / 1024:.1f} KB",
            'compression_ratio': compression_ratio,
            'streamed': self.stats['streamed_responses'],
            'websockets': self.stats['websocket_connections'],
            'deduplicated': self.stats['deduplicated_requests'],
            'cache': cache_stats
        }


class ProxyManager:
    def __init__(self):
        self.is_running = False
        self.process_manager = get_process_manager()
        self.remote_url = ""
        self.local_port = 61000
        self.proxy = None
        self.runner = None
        self.site = None
        self.loop = None
        self.thread = None
        self.app_name = "Zenzefi Proxy"

    def start(self, local_port=61000, remote_url="https://zenzefi.melxiory.ru"):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return False

        try:
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞
            port_available, port_message = check_port_availability(local_port)

            # –ï—Å–ª–∏ –ø–æ—Ä—Ç –∑–∞–Ω—è—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –Ω–∞—à–∏–º –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
            if not port_available and self.is_port_in_use_by_us(local_port):
                logger.info("‚ö†Ô∏è –ü–æ—Ä—Ç –∑–∞–Ω—è—Ç –Ω–∞—à–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å...")
                self.stop()
                time.sleep(2)
                port_available, port_message = check_port_availability(local_port)

            if not port_available:
                process_info = get_process_using_port(local_port)
                if process_info:
                    logger.warning(f"‚ö†Ô∏è {port_message}")

                    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –∑–∞–Ω–∏–º–∞—é—â–∏–π –ø–æ—Ä—Ç
                    if self.process_manager.terminate_process(process_info['pid']):
                        logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç —Å–Ω–æ–≤–∞...")
                        time.sleep(2)
                        port_available, port_message = check_port_availability(local_port)

                # –ï—Å–ª–∏ –ø–æ—Ä—Ç –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç
                if not port_available:
                    error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç {local_port}. {port_message}"
                    logger.error(f"‚ùå {error_msg}")

                    if self.process_manager.is_admin:
                        user_msg = (
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –Ω–∞ –ø–æ—Ä—Ç—É {local_port}\n\n"
                            f"–ü—Ä–∏—á–∏–Ω–∞: {port_message}\n\n"
                            f"üìã –†–µ—à–µ–Ω–∏—è:\n"
                            f"‚Ä¢ –ó–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—é—â—É—é –ø–æ—Ä—Ç {local_port}\n"
                            f"‚Ä¢ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä\n"
                            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–ª—É–∂–±—ã"
                        )
                    else:
                        user_msg = (
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –Ω–∞ –ø–æ—Ä—Ç—É {local_port}\n\n"
                            f"–ü—Ä–∏—á–∏–Ω–∞: {port_message}\n\n"
                            f"üìã –†–µ—à–µ–Ω–∏—è:\n"
                            f"‚Ä¢ –ó–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—é—â—É—é –ø–æ—Ä—Ç {local_port}\n"
                            f"‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã"
                        )

                    logger.error(user_msg)
                    return False

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä
            self.remote_url = remote_url
            self.local_port = local_port

            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä...")

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.thread = threading.Thread(target=self._run_server, daemon=True)
            self.thread.start()

            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
            time.sleep(3)

            if self.is_running:
                logger.info(f"‚úÖ –ü—Ä–æ–∫—Å–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ https://127.0.0.1:{local_port}")
                logger.info(f"üåê –ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞: {remote_url}")
                return True
            else:
                logger.error("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
            return False

    def _run_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º event loop"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            self.loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self.loop)

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            self.loop.run_until_complete(self._start_server())

            # –ó–∞–ø—É—Å–∫–∞–µ–º event loop
            self.loop.run_forever()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ event loop: {e}")
            self.is_running = False
        finally:
            if self.loop:
                self.loop.close()

    async def _start_server(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
            app_data_dir = get_app_data_dir()
            certs_dir = app_data_dir / "certificates"
            cert_path = certs_dir / "fake.crt"
            key_path = certs_dir / "fake.key"

            # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
            ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
            ssl_context.load_cert_chain(certfile=str(cert_path), keyfile=str(key_path))

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Å–∏
            self.proxy = ZenzefiProxy()
            self.proxy.upstream_url = self.remote_url
            self.proxy.local_url = f"https://127.0.0.1:{self.local_port}"

            # –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ ContentRewriter
            self.proxy.content_rewriter.set_urls(self.remote_url, self.proxy.local_url)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º connection pool
            await self.proxy.initialize()

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            app = web.Application()
            app.router.add_route('*', '/{path:.*}', self.proxy.router)

            # –°–æ–∑–¥–∞–µ–º runner
            self.runner = web.AppRunner(app, access_log=None)
            await self.runner.setup()

            # –°–æ–∑–¥–∞–µ–º site
            self.site = web.TCPSite(
                self.runner,
                host='127.0.0.1',
                port=self.local_port,
                ssl_context=ssl_context,
            )

            await self.site.start()
            self.is_running = True
            logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.local_port}")
            logger.info(f"üìä Connection pool: –ª–∏–º–∏—Ç={self.proxy.connector.limit}, per_host={self.proxy.connector.limit_per_host}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            self.is_running = False

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä...")

            self.is_running = False

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º aiohttp —Å–µ—Ä–≤–µ—Ä
            if self.loop and self.loop.is_running():
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤ event loop
                asyncio.run_coroutine_threadsafe(self._stop_server(), self.loop)
                time.sleep(2)

                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º event loop
                self.loop.call_soon_threadsafe(self.loop.stop)

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
            if self.thread and self.thread.is_alive():
                self.thread.join(timeout=5)

            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
            if self.proxy:
                stats = self.proxy.get_cache_stats()
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: {stats}")

            logger.info("‚úÖ –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")
            return False

    async def _stop_server(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            if self.site:
                await self.site.stop()
            if self.runner:
                await self.runner.cleanup()
            if self.proxy:
                await self.proxy.cleanup()
            logger.debug("‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

    def get_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏"""
        port_available, port_message = check_port_availability(self.local_port)
        port_used_by_us = self.is_port_in_use_by_us(self.local_port) if not port_available else False

        status = {
            'running': self.is_running,
            'port_available': port_available,
            'port_used_by_us': port_used_by_us,
            'port': self.local_port,
            'url': self.remote_url,
            'is_admin': self.process_manager.is_admin
        }

        if port_message:
            status['port_message'] = port_message
        if port_used_by_us:
            status['port_message'] = "–ü–æ—Ä—Ç –∑–∞–Ω—è—Ç –Ω–∞—à–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º (–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å)"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
        if self.proxy and self.is_running:
            status['cache_stats'] = self.proxy.get_cache_stats()
            status['proxy_stats'] = self.proxy.get_full_stats()

        return status

    def get_proxy_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∫—Å–∏"""
        if self.proxy and self.is_running:
            return self.proxy.get_full_stats()
        return None

    def is_port_in_use_by_us(self, port: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç –Ω–∞—à–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"""
        from utils.port_utils import get_process_using_port
        import psutil
        from pathlib import Path

        process_info = get_process_using_port(port)
        if not process_info:
            return False

        try:
            process = psutil.Process(process_info['pid'])
            exe_path = Path(process.exe())

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ Python –ø—Ä–æ—Ü–µ—Å—Å
            is_python = 'python' in process_info['name'].lower()

            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—à EXE —Ñ–∞–π–ª
            if getattr(sys, 'frozen', False):
                current_exe = Path(sys.executable)
                is_our_path = exe_path == current_exe
            else:
                # –í dev —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
                is_our_path = is_python

            logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: {process_info['name']}, PID: {process_info['pid']}")
            logger.debug(f"–ü—É—Ç—å: {exe_path}, –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å: {is_our_path}")

            return is_python and is_our_path

        except (psutil.NoSuchProcess, psutil.AccessDenied, AttributeError) as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É {port}: {e}")
            return False


# –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
_proxy_manager = None


def get_proxy_manager() -> ProxyManager:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ProxyManager"""
    global _proxy_manager
    if _proxy_manager is None:
        _proxy_manager = ProxyManager()
    return _proxy_manager