# core/startup_manager.py
import logging
import threading
from PySide6.QtCore import QThread, Signal

logger = logging.getLogger(__name__)


class StartupThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    progress_signal = Signal(str, int)  # message, progress
    finished_signal = Signal(bool, str)  # success, error_message

    def __init__(self):
        super().__init__()
        self.certificate_manager = None
        self.proxy_manager = None

    def run(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            logger.info("üìã –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ")

            # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (30%)
            self.progress_signal.emit("–ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...", 10)
            logger.debug("–ò–º–ø–æ—Ä—Ç CertificateManager...")

            from core.certificate_manager import CertificateManager
            logger.debug("CertificateManager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

            self.certificate_manager = CertificateManager()
            logger.debug("CertificateManager —Å–æ–∑–¥–∞–Ω")

            logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...")
            if not self.certificate_manager.ensure_certificates_exist():
                error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
                logger.error(f"‚ùå {error_msg}")
                self.finished_signal.emit(False, error_msg)
                return

            logger.info("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
            self.progress_signal.emit("SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≥–æ—Ç–æ–≤—ã", 40)

            # –®–∞–≥ 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–∫—Å–∏ (20%)
            self.progress_signal.emit("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...", 50)
            logger.debug("–ò–º–ø–æ—Ä—Ç ProxyManager...")

            from core.proxy_manager import get_proxy_manager
            logger.debug("get_proxy_manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

            self.proxy_manager = get_proxy_manager()
            logger.debug(f"ProxyManager —Å–æ–∑–¥–∞–Ω: {self.proxy_manager}")

            if not self.proxy_manager:
                error_msg = "get_proxy_manager() –≤–µ—Ä–Ω—É–ª None"
                logger.error(f"‚ùå {error_msg}")
                self.finished_signal.emit(False, error_msg)
                return

            logger.info("‚úÖ ProxyManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            self.progress_signal.emit("–ü—Ä–æ–∫—Å–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –≥–æ—Ç–æ–≤", 70)

            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            self.progress_signal.emit("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤...", 80)
            logger.debug("–ò–º–ø–æ—Ä—Ç port_utils...")

            from utils.port_utils import check_port_availability
            logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ 61000...")

            port_available, _ = check_port_availability(61000)
            if port_available:
                logger.info("‚úÖ –ü–æ—Ä—Ç 61000 –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                logger.warning("‚ö†Ô∏è –ü–æ—Ä—Ç 61000 –∑–∞–Ω—è—Ç, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")

            self.progress_signal.emit("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 100)
            logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã —É—Å–ø–µ–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è
            import time
            time.sleep(0.1)

            # –£—Å–ø–µ—Ö
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            self.finished_signal.emit(True, "")
            logger.info("üì§ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}"
            logger.error(error_msg, exc_info=True)
            self.finished_signal.emit(False, error_msg)

    def get_results(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã"""
        return {
            'certificate_manager': self.certificate_manager,
            'proxy_manager': self.proxy_manager
        }