# ui/main_window.py
import logging
import threading
from PySide6.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout,
                               QWidget, QPushButton, QTextEdit, QLineEdit, QLabel,
                               QGroupBox, QStatusBar, QMessageBox)
from PySide6.QtCore import QTimer, QThread, Signal, QObject
from PySide6.QtGui import QTextCursor, QFont

logger = logging.getLogger(__name__)


class LogEmitter(QObject):
    """–û–±—ä–µ–∫—Ç –¥–ª—è —ç–º–∏—Ç–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –ª–æ–≥–æ–≤"""
    log_signal = Signal(str)


class LogHandler(logging.Handler):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ GUI —Å debouncing"""

    def __init__(self, log_emitter):
        super().__init__()
        self.log_emitter = log_emitter
        self.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
        self.log_buffer = []
        self.buffer_lock = threading.Lock()
        self.flush_timer = None

    def emit(self, record):
        try:
            msg = self.format(record)
            with self.buffer_lock:
                self.log_buffer.append(msg)
                # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                if self.flush_timer is None:
                    self.flush_timer = threading.Timer(0.2, self.flush_buffer)
                    self.flush_timer.start()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ LogHandler: {e}")

    def flush_buffer(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ª–æ–≥–∏ –ø–∞–∫–µ—Ç–æ–º"""
        try:
            with self.buffer_lock:
                if self.log_buffer:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–∏–º –ø–∞–∫–µ—Ç–æ–º
                    combined_msg = '\n'.join(self.log_buffer)
                    self.log_emitter.log_signal.emit(combined_msg)
                    self.log_buffer.clear()
                self.flush_timer = None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ flush –ª–æ–≥–æ–≤: {e}")


class ProxyManagerThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
    log_signal = Signal(str)
    status_signal = Signal(dict)

    def __init__(self, proxy_manager):
        super().__init__()
        self.proxy_manager = proxy_manager
        self.action = None
        self.remote_url = ""

    def set_action(self, action, remote_url=None):
        self.action = action
        if remote_url:
            self.remote_url = remote_url

    def run(self):
        try:
            if self.action == "start":
                self.start_proxy()
            elif self.action == "stop":
                self.stop_proxy()
            elif self.action == "restart":
                self.restart_proxy()
        except Exception as e:
            self.log_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –≤ ProxyManagerThread: {e}", exc_info=True)

    def start_proxy(self):
        try:
            success = self.proxy_manager.start(61000, self.remote_url)
            status = self.proxy_manager.get_status()
            self.status_signal.emit(status)
            if success:
                self.log_signal.emit("‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            else:
                self.log_signal.emit("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–∫—Å–∏")
        except Exception as e:
            self.log_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", exc_info=True)

    def stop_proxy(self):
        try:
            success = self.proxy_manager.stop()
            status = self.proxy_manager.get_status()
            self.status_signal.emit(status)
            if success:
                self.log_signal.emit("‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                self.log_signal.emit("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏")
        except Exception as e:
            self.log_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}", exc_info=True)

    def restart_proxy(self):
        try:
            self.stop_proxy()
            if self.remote_url:
                self.start_proxy()
        except Exception as e:
            self.log_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}", exc_info=True)


class MainWindow(QMainWindow):
    def __init__(self, proxy_manager):
        super().__init__()
        self.proxy_manager = proxy_manager
        self.proxy_thread = None
        self.current_status = {}

        self.setup_ui()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
        from core.config_manager import get_config
        self.config = get_config()

        # –°–æ–∑–¥–∞–µ–º —ç–º–∏—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
        self.log_emitter = LogEmitter()

        self.setup_logging()
        self.load_config()
        self.update_status()

        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        self.status_timer = QTimer()
        self.status_timer.timeout.connect(self.update_status)
        self.status_timer.start(5000)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
        QTimer.singleShot(0, self.apply_theme)

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("Zenzefi Client")
        self.setGeometry(100, 100, 800, 600)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –æ–∫–Ω–∞
        try:
            from ui.icons import get_icon_manager
            icon_manager = get_icon_manager()
            self.setWindowIcon(icon_manager.get_icon("window_img.png"))
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É –æ–∫–Ω–∞: {e}")

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)

        # –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏
        proxy_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏")
        proxy_layout = QVBoxLayout(proxy_group)

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ URL
        url_layout = QHBoxLayout()
        url_layout.addWidget(QLabel("URL –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è:"))
        self.url_input = QLineEdit()
        self.url_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å")
        url_layout.addWidget(self.url_input)
        proxy_layout.addLayout(url_layout)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        self.start_btn = QPushButton("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–∫—Å–∏")
        self.stop_btn = QPushButton("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∫—Å–∏")
        self.restart_btn = QPushButton("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")

        self.start_btn.clicked.connect(self.start_proxy)
        self.stop_btn.clicked.connect(self.stop_proxy)
        self.restart_btn.clicked.connect(self.restart_proxy)

        buttons_layout.addWidget(self.start_btn)
        buttons_layout.addWidget(self.stop_btn)
        buttons_layout.addWidget(self.restart_btn)
        proxy_layout.addLayout(buttons_layout)

        layout.addWidget(proxy_group)

        # –ì—Ä—É–ø–ø–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        auth_group = QGroupBox("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
        auth_layout = QVBoxLayout(auth_group)

        # –ü–æ–ª–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
        token_layout = QHBoxLayout()
        token_layout.addWidget(QLabel("Access Token:"))
        self.token_input = QLineEdit()
        self.token_input.setEchoMode(QLineEdit.EchoMode.Password)
        self.token_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞")
        token_layout.addWidget(self.token_input)
        auth_layout.addLayout(token_layout)

        # –°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞
        self.token_status_label = QLabel("–°—Ç–∞—Ç—É—Å: ‚ö†Ô∏è –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        auth_layout.addWidget(self.token_status_label)

        # –°—Ç–∞—Ç—É—Å backend —Å–µ—Ä–≤–µ—Ä–∞
        self.auth_status_label = QLabel("Backend: ‚ö™ –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω")
        self.auth_status_label.setStyleSheet("color: #888888;")
        auth_layout.addWidget(self.auth_status_label)

        # –ö–Ω–æ–ø–∫–∏
        token_buttons_layout = QHBoxLayout()
        self.save_token_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.clear_token_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å")
        self.toggle_token_visibility_btn = QPushButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω")
        self.check_auth_btn = QPushButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Backend")
        self.logout_btn = QPushButton("üö™ Logout")

        self.save_token_btn.clicked.connect(self.save_token)
        self.clear_token_btn.clicked.connect(self.clear_token)
        self.toggle_token_visibility_btn.clicked.connect(self.toggle_token_visibility)
        self.check_auth_btn.clicked.connect(self.on_check_auth_clicked)
        self.logout_btn.clicked.connect(self.on_logout_clicked)

        token_buttons_layout.addWidget(self.save_token_btn)
        token_buttons_layout.addWidget(self.clear_token_btn)
        token_buttons_layout.addWidget(self.toggle_token_visibility_btn)
        token_buttons_layout.addWidget(self.check_auth_btn)
        token_buttons_layout.addWidget(self.logout_btn)
        token_buttons_layout.addStretch()
        auth_layout.addLayout(token_buttons_layout)

        layout.addWidget(auth_group)

        # –ì—Ä—É–ø–ø–∞ –ª–æ–≥–æ–≤
        log_group = QGroupBox("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
        log_layout = QVBoxLayout(log_group)

        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setFont(QFont("Courier", 10))
        log_layout.addWidget(self.log_text)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
        log_buttons_layout = QHBoxLayout()
        self.clear_log_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏")
        self.copy_log_btn = QPushButton("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏")

        self.clear_log_btn.clicked.connect(self.clear_logs)
        self.copy_log_btn.clicked.connect(self.copy_logs)

        log_buttons_layout.addWidget(self.clear_log_btn)
        log_buttons_layout.addWidget(self.copy_log_btn)
        log_buttons_layout.addStretch()
        log_layout.addLayout(log_buttons_layout)

        layout.addWidget(log_group)

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

        self.update_buttons_state()

    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ GUI"""
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self.log_handler = LogHandler(self.log_emitter)
        self.log_handler.setLevel(logging.INFO)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –∫ —Å–ª–æ—Ç—É
        self.log_emitter.log_signal.connect(self.add_log_message)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
        root_logger = logging.getLogger()
        root_logger.addHandler(self.log_handler)

        if root_logger.level == logging.NOTSET:
            root_logger.setLevel(logging.INFO)

    def add_log_message(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        try:
            self.log_text.append(message)
            self.log_text.moveCursor(QTextCursor.End)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞: {e}")

    def clear_logs(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥–∏"""
        self.log_text.clear()
        logger.info("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")

    def copy_logs(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –ª–æ–≥–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            clipboard = QApplication.clipboard()
            clipboard.setText(self.log_text.toPlainText())
            self.status_bar.showMessage("–õ–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", 3000)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤: {e}")

    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        try:
            remote_url = self.config.get('proxy.remote_url', '')
            if not remote_url:
                remote_url = 'https://zenzefi.melxiory.ru'
            self.url_input.setText(remote_url)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
            token = self.config.get_access_token()
            if token:
                self.token_input.setText(token)
                self.token_status_label.setText("–°—Ç–∞—Ç—É—Å: ‚úÖ –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                self.token_status_label.setStyleSheet("color: #00D4AA;")
            else:
                self.token_status_label.setText("–°—Ç–∞—Ç—É—Å: ‚ö†Ô∏è –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                self.token_status_label.setStyleSheet("color: #FFA500;")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            self.url_input.setText('https://zenzefi.melxiory.ru')

    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        try:
            remote_url = self.url_input.text().strip()
            if remote_url:
                self.config.set('proxy.remote_url', remote_url)
                self.config.save()
                logger.debug("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")

    def save_token(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥"""
        try:
            token = self.token_input.text().strip()
            if not token:
                self.token_status_label.setText("–°—Ç–∞—Ç—É—Å: ‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                self.token_status_label.setStyleSheet("color: #E4002B;")
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return

            if self.config.set_access_token(token):
                self.token_status_label.setText("–°—Ç–∞—Ç—É—Å: ‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
                self.token_status_label.setStyleSheet("color: #00D4AA;")
                logger.info("‚úÖ Access token —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "Access token —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
            else:
                self.token_status_label.setText("–°—Ç–∞—Ç—É—Å: ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                self.token_status_label.setStyleSheet("color: #E4002B;")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞: {e}")

    def clear_token(self):
        """–û—á–∏—â–∞–µ—Ç —Ç–æ–∫–µ–Ω"""
        try:
            reply = QMessageBox.question(
                self,
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                QMessageBox.StandardButton.No
            )

            if reply == QMessageBox.StandardButton.Yes:
                if self.config.clear_access_token():
                    self.token_input.clear()
                    self.token_status_label.setText("–°—Ç–∞—Ç—É—Å: ‚ö†Ô∏è –¢–æ–∫–µ–Ω —É–¥–∞–ª—ë–Ω")
                    self.token_status_label.setStyleSheet("color: #FFA500;")
                    logger.info("üóëÔ∏è Access token —É–¥–∞–ª—ë–Ω")
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
                else:
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞: {e}")

    def toggle_token_visibility(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞"""
        try:
            if self.token_input.echoMode() == QLineEdit.EchoMode.Password:
                self.token_input.setEchoMode(QLineEdit.EchoMode.Normal)
                self.toggle_token_visibility_btn.setText("–°–∫—Ä—ã—Ç—å —Ç–æ–∫–µ–Ω")
            else:
                self.token_input.setEchoMode(QLineEdit.EchoMode.Password)
                self.toggle_token_visibility_btn.setText("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞: {e}")

    def on_check_auth_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import threading
            thread = threading.Thread(target=self._run_check_auth_status)
            thread.daemon = True
            thread.start()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ backend: {e}")
            self.auth_status_label.setText("Backend: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")
            self.auth_status_label.setStyleSheet("color: #E4002B;")

    def _run_check_auth_status(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç check_auth_status –≤ –Ω–æ–≤–æ–º event loop"""
        import asyncio
        try:
            asyncio.run(self.check_auth_status())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _run_check_auth_status: {e}")

    async def check_auth_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–µ cookie!)"""
        try:
            import aiohttp
            import asyncio

            # Backend URL
            backend_url = "http://127.0.0.1:8000"

            self.auth_status_label.setText("Backend: üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞...")
            self.auth_status_label.setStyleSheet("color: #FFA500;")

            try:
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend (–±–µ–∑ cookie)
                async with aiohttp.ClientSession() as session:
                    async with session.get(
                        f"{backend_url}/health",  # health check endpoint
                        timeout=aiohttp.ClientTimeout(total=5),
                        ssl=False
                    ) as response:
                        if response.status == 200:
                            logger.info("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω")
                            self.auth_status_label.setText("Backend: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω")
                            self.auth_status_label.setStyleSheet("color: #00A438;")
                        else:
                            logger.warning(f"‚ö†Ô∏è Backend –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º {response.status}")
                            self.auth_status_label.setText(f"Backend: ‚ö†Ô∏è –ö–æ–¥ {response.status}")
                            self.auth_status_label.setStyleSheet("color: #FFA500;")

            except aiohttp.ClientConnectorError:
                logger.error("‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ –∑–∞–ø—É—â–µ–Ω?)")
                self.auth_status_label.setText("Backend: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                self.auth_status_label.setStyleSheet("color: #E4002B;")
            except asyncio.TimeoutError:
                logger.error("‚ùå Backend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (—Ç–∞–π–º–∞—É—Ç)")
                self.auth_status_label.setText("Backend: ‚ùå –¢–∞–π–º–∞—É—Ç")
                self.auth_status_label.setStyleSheet("color: #E4002B;")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ backend: {e}")
            self.auth_status_label.setText("Backend: ‚ùå –û—à–∏–±–∫–∞")
            self.auth_status_label.setStyleSheet("color: #E4002B;")

    def update_auth_status_ui(self, status_data):
        """DEPRECATED: –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ"""
        # Cookie —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –Ω–µ –≤ desktop client
        pass

    def on_logout_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ logout"""
        try:
            # –í –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ logout –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
            QMessageBox.information(
                self,
                'Logout —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä',
                '–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã:\n\n'
                '1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä —Å –ø—Ä–æ–∫—Å–∏\n'
                '2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://127.0.0.1:61000/logout\n'
                '3. –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä\n\n'
                'Cookie —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –Ω–µ –≤ desktop client.',
                QMessageBox.StandardButton.Ok
            )
            logger.info("‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ logout —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ logout: {e}")

    def start_proxy(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–∫—Å–∏"""
        # –°–¢–†–û–ì–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º
        if not self.config.has_access_token():
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                "Access token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n\n"
                "–î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–∫—Å–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' –∏ –Ω–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'."
            )
            logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–∫—Å–∏ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞")
            return

        remote_url = self.url_input.text().strip()
        if not remote_url:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        if not remote_url.startswith(('http://', 'https://')):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
            return

        self.save_config()
        # –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä–æ–µ—Ç —Å–∞–º
        self.start_proxy_thread("start", remote_url)

    def stop_proxy(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–∫—Å–∏"""
        self.start_proxy_thread("stop")

    def restart_proxy(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–∫—Å–∏"""
        remote_url = self.url_input.text().strip()
        if not remote_url:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        self.save_config()
        self.start_proxy_thread("restart", remote_url)

    def start_proxy_thread(self, action, remote_url=None):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
        if self.proxy_thread and self.proxy_thread.isRunning():
            logger.warning("–ü–æ—Ç–æ–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        try:
            self.proxy_thread = ProxyManagerThread(self.proxy_manager)
            self.proxy_thread.set_action(action, remote_url)
            self.proxy_thread.log_signal.connect(self.add_log_message)
            self.proxy_thread.status_signal.connect(self.handle_status_update)
            self.proxy_thread.finished.connect(self.thread_finished)
            self.proxy_thread.start()

            self.update_buttons_state(False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞: {e}", exc_info=True)
            self.update_buttons_state(True)

    def thread_finished(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞"""
        self.update_buttons_state(True)
        self.update_status()

    def handle_status_update(self, status):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            self.current_status = status
            self.update_status_display()
            # –ë—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä–æ–µ—Ç –≤—Ä—É—á–Ω—É—é - –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

    def update_status(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å"""
        try:
            if not self.proxy_thread or not self.proxy_thread.isRunning():
                status = self.proxy_manager.get_status()
                self.handle_status_update(status)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

    def update_status_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            if not self.current_status:
                return

            status = self.current_status

            # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã
            try:
                from ui.theme_manager import get_theme_manager
                theme_manager = get_theme_manager()
                colors = theme_manager.get_current_colors()
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–º—É: {e}")
                colors = {
                    'success': '#00D4AA',
                    'error': '#E4002B',
                    'header_bg': '#000000'
                }

            if status.get('running', False):
                status_text = f"‚úÖ –ü—Ä–æ–∫—Å–∏ –∑–∞–ø—É—â–µ–Ω - https://127.0.0.1:{status.get('port', 61000)} ‚Üí {status.get('url', 'N/A')}"
                text_color = colors['success']
            else:
                status_text = "‚ùå –ü—Ä–æ–∫—Å–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                text_color = colors['error']

            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä—Ç–µ
            if not status.get('port_available', True):
                if status.get('port_used_by_us', False):
                    status_text += " | ‚ö†Ô∏è –ü–æ—Ä—Ç –∑–∞–Ω—è—Ç –Ω–∞—à–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"
                    text_color = "#FFA500"
                elif 'port_message' in status:
                    status_text += f" | {status['port_message']}"
                    text_color = "#FFA500"

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞—Ä
            self.status_bar.setStyleSheet(f"color: {text_color}; background-color: {colors['header_bg']};")
            self.status_bar.showMessage(status_text)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            self.status_bar.showMessage("–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞")

    def update_buttons_state(self, enabled=True):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫"""
        try:
            self.start_btn.setEnabled(enabled)
            self.stop_btn.setEnabled(enabled)
            self.restart_btn.setEnabled(enabled)
            self.url_input.setEnabled(enabled)

            if not enabled:
                self.start_btn.setText("–ó–∞–ø—É—Å–∫...")
                self.stop_btn.setText("–û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
                self.restart_btn.setText("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
            else:
                self.start_btn.setText("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–∫—Å–∏")
                self.stop_btn.setText("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∫—Å–∏")
                self.restart_btn.setText("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫: {e}")

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞"""
        try:
            if hasattr(self, 'proxy_thread') and self.proxy_thread and self.proxy_thread.isRunning():
                reply = QMessageBox.question(
                    self,
                    '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
                    '–ü—Ä–æ–∫—Å–∏ –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?',
                    QMessageBox.Yes | QMessageBox.No,
                    QMessageBox.No
                )

                if reply == QMessageBox.Yes:
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
                    if self.proxy_thread:
                        self.proxy_thread.wait(3000)
                    event.accept()
                else:
                    event.ignore()
            else:
                event.accept()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞: {e}")
            event.accept()

    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Ç–µ–º—É Mercedes-Benz"""
        try:
            from ui.theme_manager import get_theme_manager
            theme_manager = get_theme_manager()

            stylesheet = theme_manager.get_stylesheet()
            colors = theme_manager.get_current_colors()

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞
            enhanced_stylesheet = stylesheet + f"""
                QMainWindow {{
                    background-color: {colors['primary_bg']};
                    color: {colors['text_primary']};
                }}
            """

            self.setStyleSheet(enhanced_stylesheet)

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º QTextEdit –¥–ª—è –ª–æ–≥–æ–≤
            log_style = f"""
                QTextEdit {{
                    background-color: {colors['input_bg']};
                    color: {colors['text_secondary']};
                    border: 1px solid {colors['border_dark']};
                    border-radius: 3px;
                    font-family: 'Courier New', monospace;
                    selection-background-color: {colors['button_active']};
                }}
            """
            self.log_text.setStyleSheet(log_style)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞—Ä –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ç—É—Å
            if self.current_status:
                self.update_status_display()

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            self.update()

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã: {e}")